{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"iscc-core - ISCC Core Algorithms iscc-core is a Python library that implements the core algorithms of the ISCC ( International Standard Content Code ) NOTE: This is a low level reference implementation. iscc-core does not support content/metadata detection, extraction or preprocessing. For easy generation of ISCC codes see: iscc-cli What is an ISCC The ISCC is similarity preserving identifier for digital media assets. An ISCC is derived algorithmically from the digital content itself, just like cryptographic hashes. However, instead of using a single cryptographic hash function to identify data only, the ISCC uses a variety of algorithms to create a composite identifier that exhibits similarity-preserving properties (soft hash). The component-based structure of the ISCC identifies content at multiple levels of abstraction. Each component is self-describing, modular and can be used separately or in conjunction with others to aid in various content identification tasks. The algorithmic design supports scenarios that require content deduplication, database synchronisation and indexing, integrity verification, timestamping, versioning, data provenance, similarity clustering, anomaly detection, usage tracking, allocation of royalties, fact-checking and general digital asset management use-cases. What is iscc-core iscc-core is the python based library of the core algorithms to create standard compliant ISCC codes. It also serves as a reference for porting ISCC to other programming languages. ISCC Architecture ISCC MainTypes Idx Slug Bits Purpose 0 META 0000 Match on metadata similarity 1 SEMANTIC 0001 Match on semantic content similarity 2 CONTENT 0010 Match on perceptual content similarity 3 DATA 0011 Match on data similarity 4 INSTANCE 0100 Match based data identity 5 ISCC 0101 Composite of two or more components with common header 6 ID 0110 Short unique identifier bound to ISCC, timestamp, pubkey Installation Use the package manager pip to install iscc-core . pip install iscc-core Quick Start import iscc_core meta_code = iscc_core . gen_meta_code ( title = \"ISCC Test Document!\" ) print ( f \"Meta-Code: ISCC: { meta_code . iscc } \" ) print ( f \"Structure: { meta_code . code_obj . explain } \\n \" ) # Extract text from file with open ( \"demo.txt\" , \"rt\" , encoding = \"utf-8\" ) as stream : text = stream . read () text_code = iscc_core . gen_text_code_v0 ( text ) print ( f \"Text-Code: ISCC: { text_code . iscc } \" ) print ( f \"Structure: { text_code . code_obj . explain } \\n \" ) # Process raw bytes of textfile with open ( \"demo.txt\" , \"rb\" ) as stream : data_code = iscc_core . gen_data_code ( stream ) print ( f \"Data-Code: ISCC: { data_code . iscc } \" ) print ( f \"Structure: { data_code . code_obj . explain } \\n \" ) stream . seek ( 0 ) instance_code = iscc_core . gen_instance_code ( stream ) print ( f \"Instance-Code: ISCC: { instance_code . iscc } \" ) print ( f \"Structure: { instance_code . code_obj . explain } \\n \" ) iscc_code = iscc_core . gen_iscc_code ( ( meta_code . iscc , text_code . iscc , data_code . iscc , instance_code . iscc ) ) print ( f \"ISCC-CODE: ISCC: { iscc_code . iscc } \" ) print ( f \"Structure: { iscc_code . code_obj . explain } \" ) print ( f \"Multiformat: { iscc_code . code_obj . mf_base32 } \\n \" ) iscc_id = iscc_core . gen_iscc_id ( chain = 1 , iscc_code = iscc_code . iscc , uc = 7 ) print ( f \"ISCC-ID: ISCC: { iscc_id . iscc } \" ) print ( f \"Structure: { iscc_id . code_obj . explain } \" ) print ( f \"Multiformat: { iscc_code . code_obj . mf_base32 } \" ) The output of this example is as follows: Meta-Code: ISCC:AAA3MGR7CSJ3O3D3 Structure: META-NONE-V0-64-b61a3f1493b76c7b Text-Code: ISCC:EAASS2POFOWX6KDJ Structure: CONTENT-TEXT-V0-64-2969ee2bad7f2869 Data-Code: ISCC:GAAZ5SQ47ZQ34A3V Structure: DATA-NONE-V0-64-9eca1cfe61be0375 Instance-Code: ISCC:IAASQF7FY2TLVFRC Structure: INSTANCE-NONE-V0-64-2817e5c6a6ba9622 ISCC-CODE: ISCC:KAD3MGR7CSJ3O3D3FFU64K5NP4UGTHWKDT7GDPQDOUUBPZOGU25JMIQ Structure: ISCC-TEXT-V0-256-b61a3f1493b76c7b2969ee2bad7f28699eca1cfe61be03752817e5c6a6ba9622 Multiformat: bzqavab5wdi7rje5xnr5ss2pofowx6kdjt3fbz7tbxybxkkax4xdknouwei ISCC-ID: ISCC:MEASBPSKHY7KDPZIA4 Structure: ID-BITCOIN-V0-72-20be4a3e3ea1bf28-7 Multiformat: bzqavab5wdi7rje5xnr5ss2pofowx6kdjt3fbz7tbxybxkkax4xdknouwei Documentation https://iscc-core.iscc.codes Project Status ISCC is in the process of being standardized within ISO/TC 46/SC 9 . Maintainers @titusz Contributing Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate. You may also want join our developer chat on Telegram at https://t.me/iscc_dev . Changelog [0.1.9] - Unreleased Added multiformats support Added uri representation Updated codec format documentation [0.1.8] - 2021-12-12 Added conformance tests for all top level functions Added conformance tests to source dir Added conformance module with selftest function Changed gen_image_code to accept normalized pixels instead of stream Changed opts to core_opts Removed image pre-processing and Pillow dependency Fixed readability of conformance tests Fixed soft_hash_video_v0 to accept non-tuple sequences Updated example code [0.1.7] - 2021-12-09 Add dotenv for enviroment based configuration Cleanup package toplevel imports Return schema objects for iscc_code and iscc_id Exclude unset and none values from result dicts Add support for multiple code combinations for ISCC-CODE Add support for ISCC-ID based on singular Instance-Code Add initial conformance test system [0.1.6] - 2021-11-29 Show counter for ISCC-ID in Code.explain [0.1.5] - 2021-11-28 Fix documentation Change metahash creation logic Refactor models Add Content-Code-Mixed Add ISCC-ID Refactor compose to gen_iscc_code Refactor models to schema [0.1.4] - 2021-11-17 Simplified options Optimize video WTA-hash for use with 64-bit granular features [0.1.3] - 2021-11-15 Try to compile Cython/C accelerator modules when installing via pip Simplify soft_hash api return values Add .code() method to InstanceHasher, DataHasher Remove granular fingerprint calculation Add more top-level imports [0.1.2] - 2021-11-14 Export more functions to toplevel Return schema driven objects from ISCC code generators. [0.1.1] - 2021-11-14 Fix packaging problems [0.1.0] - 2021-11-13 Initial release","title":"Overview"},{"location":"#iscc-core-iscc-core-algorithms","text":"iscc-core is a Python library that implements the core algorithms of the ISCC ( International Standard Content Code ) NOTE: This is a low level reference implementation. iscc-core does not support content/metadata detection, extraction or preprocessing. For easy generation of ISCC codes see: iscc-cli","title":"iscc-core - ISCC Core Algorithms"},{"location":"#what-is-an-iscc","text":"The ISCC is similarity preserving identifier for digital media assets. An ISCC is derived algorithmically from the digital content itself, just like cryptographic hashes. However, instead of using a single cryptographic hash function to identify data only, the ISCC uses a variety of algorithms to create a composite identifier that exhibits similarity-preserving properties (soft hash). The component-based structure of the ISCC identifies content at multiple levels of abstraction. Each component is self-describing, modular and can be used separately or in conjunction with others to aid in various content identification tasks. The algorithmic design supports scenarios that require content deduplication, database synchronisation and indexing, integrity verification, timestamping, versioning, data provenance, similarity clustering, anomaly detection, usage tracking, allocation of royalties, fact-checking and general digital asset management use-cases.","title":"What is an ISCC"},{"location":"#what-is-iscc-core","text":"iscc-core is the python based library of the core algorithms to create standard compliant ISCC codes. It also serves as a reference for porting ISCC to other programming languages.","title":"What is iscc-core"},{"location":"#iscc-architecture","text":"","title":"ISCC Architecture"},{"location":"#iscc-maintypes","text":"Idx Slug Bits Purpose 0 META 0000 Match on metadata similarity 1 SEMANTIC 0001 Match on semantic content similarity 2 CONTENT 0010 Match on perceptual content similarity 3 DATA 0011 Match on data similarity 4 INSTANCE 0100 Match based data identity 5 ISCC 0101 Composite of two or more components with common header 6 ID 0110 Short unique identifier bound to ISCC, timestamp, pubkey","title":"ISCC MainTypes"},{"location":"#installation","text":"Use the package manager pip to install iscc-core . pip install iscc-core","title":"Installation"},{"location":"#quick-start","text":"import iscc_core meta_code = iscc_core . gen_meta_code ( title = \"ISCC Test Document!\" ) print ( f \"Meta-Code: ISCC: { meta_code . iscc } \" ) print ( f \"Structure: { meta_code . code_obj . explain } \\n \" ) # Extract text from file with open ( \"demo.txt\" , \"rt\" , encoding = \"utf-8\" ) as stream : text = stream . read () text_code = iscc_core . gen_text_code_v0 ( text ) print ( f \"Text-Code: ISCC: { text_code . iscc } \" ) print ( f \"Structure: { text_code . code_obj . explain } \\n \" ) # Process raw bytes of textfile with open ( \"demo.txt\" , \"rb\" ) as stream : data_code = iscc_core . gen_data_code ( stream ) print ( f \"Data-Code: ISCC: { data_code . iscc } \" ) print ( f \"Structure: { data_code . code_obj . explain } \\n \" ) stream . seek ( 0 ) instance_code = iscc_core . gen_instance_code ( stream ) print ( f \"Instance-Code: ISCC: { instance_code . iscc } \" ) print ( f \"Structure: { instance_code . code_obj . explain } \\n \" ) iscc_code = iscc_core . gen_iscc_code ( ( meta_code . iscc , text_code . iscc , data_code . iscc , instance_code . iscc ) ) print ( f \"ISCC-CODE: ISCC: { iscc_code . iscc } \" ) print ( f \"Structure: { iscc_code . code_obj . explain } \" ) print ( f \"Multiformat: { iscc_code . code_obj . mf_base32 } \\n \" ) iscc_id = iscc_core . gen_iscc_id ( chain = 1 , iscc_code = iscc_code . iscc , uc = 7 ) print ( f \"ISCC-ID: ISCC: { iscc_id . iscc } \" ) print ( f \"Structure: { iscc_id . code_obj . explain } \" ) print ( f \"Multiformat: { iscc_code . code_obj . mf_base32 } \" ) The output of this example is as follows: Meta-Code: ISCC:AAA3MGR7CSJ3O3D3 Structure: META-NONE-V0-64-b61a3f1493b76c7b Text-Code: ISCC:EAASS2POFOWX6KDJ Structure: CONTENT-TEXT-V0-64-2969ee2bad7f2869 Data-Code: ISCC:GAAZ5SQ47ZQ34A3V Structure: DATA-NONE-V0-64-9eca1cfe61be0375 Instance-Code: ISCC:IAASQF7FY2TLVFRC Structure: INSTANCE-NONE-V0-64-2817e5c6a6ba9622 ISCC-CODE: ISCC:KAD3MGR7CSJ3O3D3FFU64K5NP4UGTHWKDT7GDPQDOUUBPZOGU25JMIQ Structure: ISCC-TEXT-V0-256-b61a3f1493b76c7b2969ee2bad7f28699eca1cfe61be03752817e5c6a6ba9622 Multiformat: bzqavab5wdi7rje5xnr5ss2pofowx6kdjt3fbz7tbxybxkkax4xdknouwei ISCC-ID: ISCC:MEASBPSKHY7KDPZIA4 Structure: ID-BITCOIN-V0-72-20be4a3e3ea1bf28-7 Multiformat: bzqavab5wdi7rje5xnr5ss2pofowx6kdjt3fbz7tbxybxkkax4xdknouwei","title":"Quick Start"},{"location":"#documentation","text":"https://iscc-core.iscc.codes","title":"Documentation"},{"location":"#project-status","text":"ISCC is in the process of being standardized within ISO/TC 46/SC 9 .","title":"Project Status"},{"location":"#maintainers","text":"@titusz","title":"Maintainers"},{"location":"#contributing","text":"Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate. You may also want join our developer chat on Telegram at https://t.me/iscc_dev .","title":"Contributing"},{"location":"#changelog","text":"","title":"Changelog"},{"location":"#019-unreleased","text":"Added multiformats support Added uri representation Updated codec format documentation","title":"[0.1.9] - Unreleased"},{"location":"#018-2021-12-12","text":"Added conformance tests for all top level functions Added conformance tests to source dir Added conformance module with selftest function Changed gen_image_code to accept normalized pixels instead of stream Changed opts to core_opts Removed image pre-processing and Pillow dependency Fixed readability of conformance tests Fixed soft_hash_video_v0 to accept non-tuple sequences Updated example code","title":"[0.1.8] - 2021-12-12"},{"location":"#017-2021-12-09","text":"Add dotenv for enviroment based configuration Cleanup package toplevel imports Return schema objects for iscc_code and iscc_id Exclude unset and none values from result dicts Add support for multiple code combinations for ISCC-CODE Add support for ISCC-ID based on singular Instance-Code Add initial conformance test system","title":"[0.1.7] - 2021-12-09"},{"location":"#016-2021-11-29","text":"Show counter for ISCC-ID in Code.explain","title":"[0.1.6] - 2021-11-29"},{"location":"#015-2021-11-28","text":"Fix documentation Change metahash creation logic Refactor models Add Content-Code-Mixed Add ISCC-ID Refactor compose to gen_iscc_code Refactor models to schema","title":"[0.1.5] - 2021-11-28"},{"location":"#014-2021-11-17","text":"Simplified options Optimize video WTA-hash for use with 64-bit granular features","title":"[0.1.4] - 2021-11-17"},{"location":"#013-2021-11-15","text":"Try to compile Cython/C accelerator modules when installing via pip Simplify soft_hash api return values Add .code() method to InstanceHasher, DataHasher Remove granular fingerprint calculation Add more top-level imports","title":"[0.1.3] - 2021-11-15"},{"location":"#012-2021-11-14","text":"Export more functions to toplevel Return schema driven objects from ISCC code generators.","title":"[0.1.2] - 2021-11-14"},{"location":"#011-2021-11-14","text":"Fix packaging problems","title":"[0.1.1] - 2021-11-14"},{"location":"#010-2021-11-13","text":"Initial release","title":"[0.1.0] - 2021-11-13"},{"location":"conformance/","text":"ISCC - Core Algorithms - Conformance Conformance Testing An application that claims ISCC conformance MUST pass all core functions from the ISCC conformance test suite. The test suite is available as JSON data on Github . Test data is structured as follows: { \"<function_name>\" : { \"<test_name>\" : { \"inputs\" : [ \"<value1>\" , \"<value2>\" ], \"outputs\" : [ \"value1>\" , \"<value2>\" ] } } } Inputs that are expected to be raw byte streams are embedded as HEX encoded strings in JSON and prefixed with stream: to support automated decoding during implementation testing. Example Byte outputs in JSON test data: \"gen_data_code_v0\" : { \"test_0000_two_bytes_64\" : { \"inputs\" : [ \"stream:ff00\" , 64 ], \"outputs\" : { \"iscc\" : \"GAAXL2XYM5BQIAZ3\" } }, ... Functions generate_tests () Yield tuples of test data. Returns: Type Description Union[Generat,[Tuple[str, Callable, List[Any], List[Any]]]] Tuple with testdata (test_name, func_obj, inputs, outputs) selftest () Run conformance tests. Returns: Type Description bool whether all tests passed","title":"Conformance"},{"location":"conformance/#iscc-core-algorithms-conformance","text":"","title":"ISCC - Core Algorithms - Conformance"},{"location":"conformance/#iscc_core.conformance--conformance-testing","text":"An application that claims ISCC conformance MUST pass all core functions from the ISCC conformance test suite. The test suite is available as JSON data on Github . Test data is structured as follows: { \"<function_name>\" : { \"<test_name>\" : { \"inputs\" : [ \"<value1>\" , \"<value2>\" ], \"outputs\" : [ \"value1>\" , \"<value2>\" ] } } } Inputs that are expected to be raw byte streams are embedded as HEX encoded strings in JSON and prefixed with stream: to support automated decoding during implementation testing. Example Byte outputs in JSON test data: \"gen_data_code_v0\" : { \"test_0000_two_bytes_64\" : { \"inputs\" : [ \"stream:ff00\" , 64 ], \"outputs\" : { \"iscc\" : \"GAAXL2XYM5BQIAZ3\" } }, ...","title":"Conformance Testing"},{"location":"conformance/#iscc_core.conformance-functions","text":"","title":"Functions"},{"location":"conformance/#iscc_core.conformance.generate_tests","text":"Yield tuples of test data. Returns: Type Description Union[Generat,[Tuple[str, Callable, List[Any], List[Any]]]] Tuple with testdata (test_name, func_obj, inputs, outputs)","title":"generate_tests()"},{"location":"conformance/#iscc_core.conformance.selftest","text":"Run conformance tests. Returns: Type Description bool whether all tests passed","title":"selftest()"},{"location":"iscc_code/","text":"ISCC-Code ISCC - a multi-component identifier for digital media assets. An ISCC-CODE is generated from the concatenation of the digests of the following four components together with a single common header: Meta-Code - Encodes metadata similarity Content-Code - Encodes syntactic/perceptual similarity Data-Code - Encodes raw bitstream similarity Instance-Code - Data checksum The following combinations of components are possible: Meta, Content, Data, Instance (256-bit / 64-bit per component) Content, Data, Instance (192-bit / 64-bit per component) Data, Instance (256 or 128 bit / 64 or 128-bit per component) Functions gen_iscc_code ( codes ) Combine multiple ISCC components to a composite ISCC with a common header using the latest standard algorithm. Parameters: Name Type Description Default codes Iterable[str] A valid sequence of singluar ISCC codes. required Returns: Type Description IsccCode An IsccCode object gen_iscc_code_v0 ( codes ) Combine multiple ISCC components to a composite ISCC with a common header using algorithm v0. Parameters: Name Type Description Default codes Iterable[str] A valid sequence of singluar ISCC codes. required Returns: Type Description IsccCode An IsccCode object","title":"ISCC-Code"},{"location":"iscc_code/#iscc-code","text":"ISCC - a multi-component identifier for digital media assets. An ISCC-CODE is generated from the concatenation of the digests of the following four components together with a single common header: Meta-Code - Encodes metadata similarity Content-Code - Encodes syntactic/perceptual similarity Data-Code - Encodes raw bitstream similarity Instance-Code - Data checksum The following combinations of components are possible: Meta, Content, Data, Instance (256-bit / 64-bit per component) Content, Data, Instance (192-bit / 64-bit per component) Data, Instance (256 or 128 bit / 64 or 128-bit per component)","title":"ISCC-Code"},{"location":"iscc_code/#iscc_core.iscc_code-functions","text":"","title":"Functions"},{"location":"iscc_code/#iscc_core.iscc_code.gen_iscc_code","text":"Combine multiple ISCC components to a composite ISCC with a common header using the latest standard algorithm. Parameters: Name Type Description Default codes Iterable[str] A valid sequence of singluar ISCC codes. required Returns: Type Description IsccCode An IsccCode object","title":"gen_iscc_code()"},{"location":"iscc_code/#iscc_core.iscc_code.gen_iscc_code_v0","text":"Combine multiple ISCC components to a composite ISCC with a common header using algorithm v0. Parameters: Name Type Description Default codes Iterable[str] A valid sequence of singluar ISCC codes. required Returns: Type Description IsccCode An IsccCode object","title":"gen_iscc_code_v0()"},{"location":"iscc_id/","text":"ISCC-ID A decentralized short identifier for digital assets. The ISCC-ID is generated from a similarity-hash of the components of an ISCC-CODE . Its SubType designates the blockchain from which the ISCC-ID was minted. The similarity-hash is always at least 64-bits and optionally suffixed with a uvarint endcoded uniqueness counter . The uniqueness counter is added and incremented only if the mint colides with a pre-existing ISCC-ID minted from the same blockchain from a different ISCC-CODE or from an identical ISCC-CODE registered by a different signatory. Functions gen_iscc_id ( chain , iscc_code , uc = 0 ) Generate an ISCC-ID from an ISCC-CODE with uniqueness counter 'uc' with latest standard algorithm. Parameters: Name Type Description Default chain int Chain-ID of blockchain from which the ISCC-ID is minted. required iscc_code str The ISCC-CODE from which to mint the ISCC-ID. required uc int Uniqueness counter of ISCC-ID. 0 Returns: Type Description IsccID ISCC-ID gen_iscc_id_v0 ( chain_id , iscc_code , uc = 0 ) Generate an ISCC-ID from an ISCC-CODE with uniqueness counter 'uc' with algorithm v0. Parameters: Name Type Description Default chain_id int Chain-ID of blockchain from which the ISCC-ID is minted. required iscc_code str The ISCC-CODE from which to mint the ISCC-ID. required uc int Uniqueness counter for ISCC-ID. 0 Returns: Type Description IsccID ISCC-ID soft_hash_iscc_id_v0 ( iscc_code , uc = 0 ) Calculate ISCC-ID hash digest from ISCC-CODE digest with algorithm v0. Parameters: Name Type Description Default iscc_code str ISCC-CODE required uc int Uniqueness counter for ISCC-ID. 0 Returns: Type Description bytes Digest for ISCC-ID without header but including uniqueness counter. incr_iscc_id ( iscc_id ) Increment uniqueness counter of an ISCC-ID with latest standard algorithm. Parameters: Name Type Description Default iscc_id str Base32-encoded ISCC-ID. required Returns: Type Description str Base32-encoded ISCC-ID with counter incremented by one. incr_iscc_id_v0 ( iscc_id ) Increment uniqueness counter of an ISCC-ID with algorithm v0. Parameters: Name Type Description Default iscc_id str Base32-encoded ISCC-ID. required Returns: Type Description str Base32-encoded ISCC-ID with counter incremented by one.","title":"ISCC-ID"},{"location":"iscc_id/#iscc-id","text":"A decentralized short identifier for digital assets. The ISCC-ID is generated from a similarity-hash of the components of an ISCC-CODE . Its SubType designates the blockchain from which the ISCC-ID was minted. The similarity-hash is always at least 64-bits and optionally suffixed with a uvarint endcoded uniqueness counter . The uniqueness counter is added and incremented only if the mint colides with a pre-existing ISCC-ID minted from the same blockchain from a different ISCC-CODE or from an identical ISCC-CODE registered by a different signatory.","title":"ISCC-ID"},{"location":"iscc_id/#iscc_core.iscc_id-functions","text":"","title":"Functions"},{"location":"iscc_id/#iscc_core.iscc_id.gen_iscc_id","text":"Generate an ISCC-ID from an ISCC-CODE with uniqueness counter 'uc' with latest standard algorithm. Parameters: Name Type Description Default chain int Chain-ID of blockchain from which the ISCC-ID is minted. required iscc_code str The ISCC-CODE from which to mint the ISCC-ID. required uc int Uniqueness counter of ISCC-ID. 0 Returns: Type Description IsccID ISCC-ID","title":"gen_iscc_id()"},{"location":"iscc_id/#iscc_core.iscc_id.gen_iscc_id_v0","text":"Generate an ISCC-ID from an ISCC-CODE with uniqueness counter 'uc' with algorithm v0. Parameters: Name Type Description Default chain_id int Chain-ID of blockchain from which the ISCC-ID is minted. required iscc_code str The ISCC-CODE from which to mint the ISCC-ID. required uc int Uniqueness counter for ISCC-ID. 0 Returns: Type Description IsccID ISCC-ID","title":"gen_iscc_id_v0()"},{"location":"iscc_id/#iscc_core.iscc_id.soft_hash_iscc_id_v0","text":"Calculate ISCC-ID hash digest from ISCC-CODE digest with algorithm v0. Parameters: Name Type Description Default iscc_code str ISCC-CODE required uc int Uniqueness counter for ISCC-ID. 0 Returns: Type Description bytes Digest for ISCC-ID without header but including uniqueness counter.","title":"soft_hash_iscc_id_v0()"},{"location":"iscc_id/#iscc_core.iscc_id.incr_iscc_id","text":"Increment uniqueness counter of an ISCC-ID with latest standard algorithm. Parameters: Name Type Description Default iscc_id str Base32-encoded ISCC-ID. required Returns: Type Description str Base32-encoded ISCC-ID with counter incremented by one.","title":"incr_iscc_id()"},{"location":"iscc_id/#iscc_core.iscc_id.incr_iscc_id_v0","text":"Increment uniqueness counter of an ISCC-ID with algorithm v0. Parameters: Name Type Description Default iscc_id str Base32-encoded ISCC-ID. required Returns: Type Description str Base32-encoded ISCC-ID with counter incremented by one.","title":"incr_iscc_id_v0()"},{"location":"algorithms/cdc/","text":"Content Defined Chunking Compatible with fastcdc Functions data_chunks ( data , utf32 , avg_chunk_size = 1024 ) A generator that yields data-dependent chunks for data . Usage Example: for chunk in data_chunks ( data ): hash ( chunk ) Parameters: Name Type Description Default data bytes Raw data for variable sized chunking. required utf32 bool If true assume we are chunking text that is utf32 encoded. required avg_chunk_size int Target chunk size in number of bytes. 1024 Returns: Type Description Union[Generat,[bytes]] A generator that yields data chunks of variable sizes. cdc_offset ( buffer , mi , ma , cs , mask_s , mask_l ) Find breakpoint offset for a given buffer. Parameters: Name Type Description Default buffer Data The data to be chunked. required mi int Minimum chunk size. required ma int Maximung chunk size. required cs int Center size. required mask_s int Small mask. required mask_l int Large mask. required Returns: Type Description int Offset of dynamic cutpoint in number of bytes. get_params ( avg_size : int ) -> tuple Calculate CDC parameters Parameters: Name Type Description Default avg_size int Target average size of chunks in number of bytes. required Returns: Type Description tuple Tuple of (min_size, max_size, center_size, mask_s, mask_l).","title":"CDC"},{"location":"algorithms/cdc/#iscc_core.cdc-functions","text":"","title":"Functions"},{"location":"algorithms/cdc/#iscc_core.cdc.data_chunks","text":"A generator that yields data-dependent chunks for data . Usage Example: for chunk in data_chunks ( data ): hash ( chunk ) Parameters: Name Type Description Default data bytes Raw data for variable sized chunking. required utf32 bool If true assume we are chunking text that is utf32 encoded. required avg_chunk_size int Target chunk size in number of bytes. 1024 Returns: Type Description Union[Generat,[bytes]] A generator that yields data chunks of variable sizes.","title":"data_chunks()"},{"location":"algorithms/cdc/#iscc_core.cdc.cdc_offset","text":"Find breakpoint offset for a given buffer. Parameters: Name Type Description Default buffer Data The data to be chunked. required mi int Minimum chunk size. required ma int Maximung chunk size. required cs int Center size. required mask_s int Small mask. required mask_l int Large mask. required Returns: Type Description int Offset of dynamic cutpoint in number of bytes.","title":"cdc_offset()"},{"location":"algorithms/cdc/#iscc_core.cdc.get_params","text":"Calculate CDC parameters Parameters: Name Type Description Default avg_size int Target average size of chunks in number of bytes. required Returns: Type Description tuple Tuple of (min_size, max_size, center_size, mask_s, mask_l).","title":"get_params()"},{"location":"algorithms/dct/","text":"Discrete Cosine Transform. Functions dct ( v ) Discrete cosine transform. See: https://www.nayuki.io/page/fast-discrete-cosine-transform-algorithms). Parameters: Name Type Description Default v Sequence[float] Input vector for DCT calculation. required Returns: Type Description List DCT Transformed vector.","title":"DCT"},{"location":"algorithms/dct/#iscc_core.dct-functions","text":"","title":"Functions"},{"location":"algorithms/dct/#iscc_core.dct.dct","text":"Discrete cosine transform. See: https://www.nayuki.io/page/fast-discrete-cosine-transform-algorithms). Parameters: Name Type Description Default v Sequence[float] Input vector for DCT calculation. required Returns: Type Description List DCT Transformed vector.","title":"dct()"},{"location":"algorithms/minhash/","text":"Minimum Hash Functions minhash ( features ) Calculate a 64 dimensional minhash integer vector. minhash_64 ( features ) Create 64-bit minimum hash digest. minhash_256 ( features ) Create 256-bit minimum hash digest. compress ( mhash , lsb = 4 ) Compress minhash vector to byte hash-digest. Concatenates lsb number of least significant bits from each integer in mhash . For example an mhash with 64 integers will produce a 256-bit summary of the minhash vector.","title":"Minhash"},{"location":"algorithms/minhash/#iscc_core.minhash-functions","text":"","title":"Functions"},{"location":"algorithms/minhash/#iscc_core.minhash.minhash","text":"Calculate a 64 dimensional minhash integer vector.","title":"minhash()"},{"location":"algorithms/minhash/#iscc_core.minhash.minhash_64","text":"Create 64-bit minimum hash digest.","title":"minhash_64()"},{"location":"algorithms/minhash/#iscc_core.minhash.minhash_256","text":"Create 256-bit minimum hash digest.","title":"minhash_256()"},{"location":"algorithms/minhash/#iscc_core.minhash.compress","text":"Compress minhash vector to byte hash-digest. Concatenates lsb number of least significant bits from each integer in mhash . For example an mhash with 64 integers will produce a 256-bit summary of the minhash vector.","title":"compress()"},{"location":"algorithms/simhash/","text":"Functions similarity_hash ( hash_digests ) Creates a similarity preserving hash from a sequence of equal sized hash digests. Parameters: Name Type Description Default hash_digests list A sequence of equaly sized byte-hashes. required Returns: Type Description bytes Similarity byte-hash","title":"Simhash"},{"location":"algorithms/simhash/#iscc_core.simhash-functions","text":"","title":"Functions"},{"location":"algorithms/simhash/#iscc_core.simhash.similarity_hash","text":"Creates a similarity preserving hash from a sequence of equal sized hash digests. Parameters: Name Type Description Default hash_digests list A sequence of equaly sized byte-hashes. required Returns: Type Description bytes Similarity byte-hash","title":"similarity_hash()"},{"location":"algorithms/wtahash/","text":"Winner Takes All Hash Functions wtahash ( vec : Sequence [ float ], bits ) -> bytes Calculate WTA Hash for vector with 380 values (MP7 frame signature).","title":"WTAHash"},{"location":"algorithms/wtahash/#iscc_core.wtahash-functions","text":"","title":"Functions"},{"location":"algorithms/wtahash/#iscc_core.wtahash.wtahash","text":"Calculate WTA Hash for vector with 380 values (MP7 frame signature).","title":"wtahash()"},{"location":"codec/codec/","text":"ISCC - Codec The iscc_core.codec module provides encoding, decoding and transcoding related functions. ISCC Component Structure Header: <type> <subtype> <version> <length> each coded as a variable-length 4-bit sequence. Body: <hash-digest> with number of bits as indicated by <length> Classes Code Convenience class to handle different representations of an ISCC code. Attributes code : str property readonly Standard base32 representation of an ISCC code. uri : str property readonly Standard uri representation of an ISCC code. bytes : bytes property readonly Raw bytes of code (including header). hex : str property readonly Hex representation of code (including header). uint : int property readonly Integer representation of code (including header) type_id : str property readonly A unique composite type-id (use as name to index codes seperately). explain : str property readonly Human readble representation of code header. hash_bytes : < property object at 0x000002473B18CEA0 > property readonly Byte representation of code (without header) hash_hex : str property readonly Hex string representation of code (without header). hash_bits : str property readonly String of 0,1 representing the bits of the code (without header). hash_ints : List [ int ] property readonly List of 0,1 integers representing the bits of the code (without header). hash_uint : int property readonly Unsinged integer representation of the code (without header). hash_ba : frozenbitarray property readonly Bitarray object of the code (without header). header_bytes : < property object at 0x000002473B18CEA0 > property readonly Byte representation of header prefix of the code maintype : MT property readonly Enum maintype of code. subtype : Union [ iscc_core . codec . ST , iscc_core . codec . ST_CC , iscc_core . codec . ST_ID ] property readonly Enum subtype of code. version : VS property readonly Enum version of code. length : int property readonly Length of code hash in number of bits (without header). mc_bytes property readonly ISCC header + body with multicodec prefix. mf_base32 property readonly Multiformats base32 encoded. mf_base64url property readonly Multiformats base64url encoded. Methods __init__ ( self , code ) special Initialize a Code object from any kind of representation of an ISCC. Parameters: Name Type Description Default code AnyISCC Any valid representation of an ISCC required rnd ( mt = None , bits = 64 , data = None ) classmethod Returns a syntactically correct random code (no MT.ID support yet) __xor__ ( self , other ) -> int special Use XOR operator for hamming distance calculation. LN ( IntEnum ) ISCC length in bits MT ( IntEnum ) ISCC MainTypes MULTIBASE ( str , Enum ) Multibase encodings ST ( IntEnum ) Generic SubTypes ST_CC ( IntEnum ) SubTypes for ISCC-Codes and Content-Codes ST_ID ( IntEnum ) SubTypes for ISCC-IDs VS ( IntEnum ) ISCC code Versions Functions write_header ( mtype , stype , version = 0 , length = 64 ) Encodes header values with nibble-sized (4-bit) variable-length encoding. The result is minimum 2 and maximum 8 bytes long. If the final count of nibbles is uneven it is padded with 4-bit 0000 at the end. Parameters: Name Type Description Default mtype int Main-type of component. required stype int Sub-type of component. required version int Version of component algorithm. 0 length int Length of component in number of bits (multiple of 32) 64 Returns: Type Description bytes Byte encoded ISCC header. read_header ( data ) Decodes varnibble encoded header and returns it together with hash bytes. Parameters: Name Type Description Default data bytes ISCC bytes digest required Returns: Type Description (type, subtype, version, length, hash bytes) encode_base32 ( data ) Standard RFC4648 base32 encoding without padding. decode_base32 ( code ) Standard RFC4648 base32 decoding without padding and with casefolding. encode_base64 ( data : bytes ) -> str Standard RFC4648 base64url encoding without padding. decode_base64 ( code : str ) -> bytes Standard RFC4648 base64url decoding without padding. encode_component ( mtype , stype , version , length , digest ) Encode a ISCC component inlcuding header and body with standard base32 encoding. Note If digest has more bits than specified by length it wil be truncated. Parameters: Name Type Description Default mtype int Main-type of component. required stype int Sub-type of component. required version int Version of component algorithm. required length int Length of component in number of bits (multiple of 32) required digest bytes The hash digest of the component. required Returns: Type Description str Base32 encoded component code. clean ( iscc ) Cleanup ISCC String. Removes leading scheme and dashes. decompose ( iscc_code ) Decompose an ISCC into a list of singular componet codes.","title":"Codec"},{"location":"codec/codec/#iscc-codec","text":"The iscc_core.codec module provides encoding, decoding and transcoding related functions.","title":"ISCC - Codec"},{"location":"codec/codec/#iscc_core.codec--iscc-component-structure","text":"Header: <type> <subtype> <version> <length> each coded as a variable-length 4-bit sequence. Body: <hash-digest> with number of bits as indicated by <length>","title":"ISCC Component Structure"},{"location":"codec/codec/#iscc_core.codec-classes","text":"","title":"Classes"},{"location":"codec/codec/#iscc_core.codec.Code","text":"Convenience class to handle different representations of an ISCC code.","title":"Code"},{"location":"codec/codec/#iscc_core.codec.Code-attributes","text":"","title":"Attributes"},{"location":"codec/codec/#iscc_core.codec.Code.code","text":"Standard base32 representation of an ISCC code.","title":"code"},{"location":"codec/codec/#iscc_core.codec.Code.uri","text":"Standard uri representation of an ISCC code.","title":"uri"},{"location":"codec/codec/#iscc_core.codec.Code.bytes","text":"Raw bytes of code (including header).","title":"bytes"},{"location":"codec/codec/#iscc_core.codec.Code.hex","text":"Hex representation of code (including header).","title":"hex"},{"location":"codec/codec/#iscc_core.codec.Code.uint","text":"Integer representation of code (including header)","title":"uint"},{"location":"codec/codec/#iscc_core.codec.Code.type_id","text":"A unique composite type-id (use as name to index codes seperately).","title":"type_id"},{"location":"codec/codec/#iscc_core.codec.Code.explain","text":"Human readble representation of code header.","title":"explain"},{"location":"codec/codec/#iscc_core.codec.Code.hash_bytes","text":"Byte representation of code (without header)","title":"hash_bytes"},{"location":"codec/codec/#iscc_core.codec.Code.hash_hex","text":"Hex string representation of code (without header).","title":"hash_hex"},{"location":"codec/codec/#iscc_core.codec.Code.hash_bits","text":"String of 0,1 representing the bits of the code (without header).","title":"hash_bits"},{"location":"codec/codec/#iscc_core.codec.Code.hash_ints","text":"List of 0,1 integers representing the bits of the code (without header).","title":"hash_ints"},{"location":"codec/codec/#iscc_core.codec.Code.hash_uint","text":"Unsinged integer representation of the code (without header).","title":"hash_uint"},{"location":"codec/codec/#iscc_core.codec.Code.hash_ba","text":"Bitarray object of the code (without header).","title":"hash_ba"},{"location":"codec/codec/#iscc_core.codec.Code.header_bytes","text":"Byte representation of header prefix of the code","title":"header_bytes"},{"location":"codec/codec/#iscc_core.codec.Code.maintype","text":"Enum maintype of code.","title":"maintype"},{"location":"codec/codec/#iscc_core.codec.Code.subtype","text":"Enum subtype of code.","title":"subtype"},{"location":"codec/codec/#iscc_core.codec.Code.version","text":"Enum version of code.","title":"version"},{"location":"codec/codec/#iscc_core.codec.Code.length","text":"Length of code hash in number of bits (without header).","title":"length"},{"location":"codec/codec/#iscc_core.codec.Code.mc_bytes","text":"ISCC header + body with multicodec prefix.","title":"mc_bytes"},{"location":"codec/codec/#iscc_core.codec.Code.mf_base32","text":"Multiformats base32 encoded.","title":"mf_base32"},{"location":"codec/codec/#iscc_core.codec.Code.mf_base64url","text":"Multiformats base64url encoded.","title":"mf_base64url"},{"location":"codec/codec/#iscc_core.codec.Code-methods","text":"","title":"Methods"},{"location":"codec/codec/#iscc_core.codec.Code.__init__","text":"Initialize a Code object from any kind of representation of an ISCC. Parameters: Name Type Description Default code AnyISCC Any valid representation of an ISCC required","title":"__init__()"},{"location":"codec/codec/#iscc_core.codec.Code.rnd","text":"Returns a syntactically correct random code (no MT.ID support yet)","title":"rnd()"},{"location":"codec/codec/#iscc_core.codec.Code.__xor__","text":"Use XOR operator for hamming distance calculation.","title":"__xor__()"},{"location":"codec/codec/#iscc_core.codec.LN","text":"ISCC length in bits","title":"LN"},{"location":"codec/codec/#iscc_core.codec.MT","text":"ISCC MainTypes","title":"MT"},{"location":"codec/codec/#iscc_core.codec.MULTIBASE","text":"Multibase encodings","title":"MULTIBASE"},{"location":"codec/codec/#iscc_core.codec.ST","text":"Generic SubTypes","title":"ST"},{"location":"codec/codec/#iscc_core.codec.ST_CC","text":"SubTypes for ISCC-Codes and Content-Codes","title":"ST_CC"},{"location":"codec/codec/#iscc_core.codec.ST_ID","text":"SubTypes for ISCC-IDs","title":"ST_ID"},{"location":"codec/codec/#iscc_core.codec.VS","text":"ISCC code Versions","title":"VS"},{"location":"codec/codec/#iscc_core.codec-functions","text":"","title":"Functions"},{"location":"codec/codec/#iscc_core.codec.write_header","text":"Encodes header values with nibble-sized (4-bit) variable-length encoding. The result is minimum 2 and maximum 8 bytes long. If the final count of nibbles is uneven it is padded with 4-bit 0000 at the end. Parameters: Name Type Description Default mtype int Main-type of component. required stype int Sub-type of component. required version int Version of component algorithm. 0 length int Length of component in number of bits (multiple of 32) 64 Returns: Type Description bytes Byte encoded ISCC header.","title":"write_header()"},{"location":"codec/codec/#iscc_core.codec.read_header","text":"Decodes varnibble encoded header and returns it together with hash bytes. Parameters: Name Type Description Default data bytes ISCC bytes digest required Returns: Type Description (type, subtype, version, length, hash bytes)","title":"read_header()"},{"location":"codec/codec/#iscc_core.codec.encode_base32","text":"Standard RFC4648 base32 encoding without padding.","title":"encode_base32()"},{"location":"codec/codec/#iscc_core.codec.decode_base32","text":"Standard RFC4648 base32 decoding without padding and with casefolding.","title":"decode_base32()"},{"location":"codec/codec/#iscc_core.codec.encode_base64","text":"Standard RFC4648 base64url encoding without padding.","title":"encode_base64()"},{"location":"codec/codec/#iscc_core.codec.decode_base64","text":"Standard RFC4648 base64url decoding without padding.","title":"decode_base64()"},{"location":"codec/codec/#iscc_core.codec.encode_component","text":"Encode a ISCC component inlcuding header and body with standard base32 encoding. Note If digest has more bits than specified by length it wil be truncated. Parameters: Name Type Description Default mtype int Main-type of component. required stype int Sub-type of component. required version int Version of component algorithm. required length int Length of component in number of bits (multiple of 32) required digest bytes The hash digest of the component. required Returns: Type Description str Base32 encoded component code.","title":"encode_component()"},{"location":"codec/codec/#iscc_core.codec.clean","text":"Cleanup ISCC String. Removes leading scheme and dashes.","title":"clean()"},{"location":"codec/codec/#iscc_core.codec.decompose","text":"Decompose an ISCC into a list of singular componet codes.","title":"decompose()"},{"location":"components/","text":"ISCC - Components A standard ISCC-Code is build from multiple components. Each component serve a different purpose.","title":"ISCC - Components"},{"location":"components/#iscc-components","text":"A standard ISCC-Code is build from multiple components. Each component serve a different purpose.","title":"ISCC - Components"},{"location":"components/code_data/","text":"ISCC - Data-Code A similarity perserving hash for binary data (soft hash). Classes DataHasher Incremental Data-Hash generator. Methods push ( self , data ) Push data to the Data-Hash generator. digest ( self ) Calculate 256-bit minhash digest from feature hashes. code ( self , bits = 64 ) Encode digest as an ISCC Data-Code component. Parameters: Name Type Description Default bits int Number of bits for the ISCC Data-Code 64 Returns: Type Description str ISCC Data-Code features ( self ) Calculate and encode granular feature hashes. Returns: Type Description List[str] Base64 encoded granular features (64-bit soft hashes) sizes ( self ) Calculate sizes of granular feature chunks Returns: Type Description List[int] List of sizes of granular features in number of bytes DataHasherV0 Incremental Data-Hash generator. Methods push ( self , data ) Push data to the Data-Hash generator. digest ( self ) Calculate 256-bit minhash digest from feature hashes. code ( self , bits = 64 ) Encode digest as an ISCC Data-Code component. Parameters: Name Type Description Default bits int Number of bits for the ISCC Data-Code 64 Returns: Type Description str ISCC Data-Code features ( self ) Calculate and encode granular feature hashes. Returns: Type Description List[str] Base64 encoded granular features (64-bit soft hashes) sizes ( self ) Calculate sizes of granular feature chunks Returns: Type Description List[int] List of sizes of granular features in number of bytes Functions gen_data_code ( stream , bits = 64 ) Create a similarity preserving ISCC Data-Code with the latest standard algorithm. Parameters: Name Type Description Default stream Stream Input data stream. required bits int Bit-length of ISCC Data-Code (default 64). 64 Returns: Type Description DataCode ISCC Data-Code with properties: code, features, sizes gen_data_code_v0 ( stream , bits = 64 ) Create an ISCC Data-Code with algorithm v0. Parameters: Name Type Description Default stream Stream Input data stream. required bits int Bit-length of ISCC Data-Code (default 64). 64 Returns: Type Description DataCode Standardized ISCC DataCode object soft_hash_data_v0 ( stream ) Create a similarity preserving Data-Hash digest Parameters: Name Type Description Default stream Input data stream. required Returns: Type Description bytes 256-bit Data-Hash (soft-hash) digest used as body for Data-Code","title":"Data-Code"},{"location":"components/code_data/#iscc-data-code","text":"A similarity perserving hash for binary data (soft hash).","title":"ISCC - Data-Code"},{"location":"components/code_data/#iscc_core.code_data-classes","text":"","title":"Classes"},{"location":"components/code_data/#iscc_core.code_data.DataHasher","text":"Incremental Data-Hash generator.","title":"DataHasher"},{"location":"components/code_data/#iscc_core.code_data.DataHasher-methods","text":"","title":"Methods"},{"location":"components/code_data/#iscc_core.code_data.DataHasher.push","text":"Push data to the Data-Hash generator.","title":"push()"},{"location":"components/code_data/#iscc_core.code_data.DataHasher.digest","text":"Calculate 256-bit minhash digest from feature hashes.","title":"digest()"},{"location":"components/code_data/#iscc_core.code_data.DataHasher.code","text":"Encode digest as an ISCC Data-Code component. Parameters: Name Type Description Default bits int Number of bits for the ISCC Data-Code 64 Returns: Type Description str ISCC Data-Code","title":"code()"},{"location":"components/code_data/#iscc_core.code_data.DataHasher.features","text":"Calculate and encode granular feature hashes. Returns: Type Description List[str] Base64 encoded granular features (64-bit soft hashes)","title":"features()"},{"location":"components/code_data/#iscc_core.code_data.DataHasher.sizes","text":"Calculate sizes of granular feature chunks Returns: Type Description List[int] List of sizes of granular features in number of bytes","title":"sizes()"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0","text":"Incremental Data-Hash generator.","title":"DataHasherV0"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0-methods","text":"","title":"Methods"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0.push","text":"Push data to the Data-Hash generator.","title":"push()"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0.digest","text":"Calculate 256-bit minhash digest from feature hashes.","title":"digest()"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0.code","text":"Encode digest as an ISCC Data-Code component. Parameters: Name Type Description Default bits int Number of bits for the ISCC Data-Code 64 Returns: Type Description str ISCC Data-Code","title":"code()"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0.features","text":"Calculate and encode granular feature hashes. Returns: Type Description List[str] Base64 encoded granular features (64-bit soft hashes)","title":"features()"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0.sizes","text":"Calculate sizes of granular feature chunks Returns: Type Description List[int] List of sizes of granular features in number of bytes","title":"sizes()"},{"location":"components/code_data/#iscc_core.code_data-functions","text":"","title":"Functions"},{"location":"components/code_data/#iscc_core.code_data.gen_data_code","text":"Create a similarity preserving ISCC Data-Code with the latest standard algorithm. Parameters: Name Type Description Default stream Stream Input data stream. required bits int Bit-length of ISCC Data-Code (default 64). 64 Returns: Type Description DataCode ISCC Data-Code with properties: code, features, sizes","title":"gen_data_code()"},{"location":"components/code_data/#iscc_core.code_data.gen_data_code_v0","text":"Create an ISCC Data-Code with algorithm v0. Parameters: Name Type Description Default stream Stream Input data stream. required bits int Bit-length of ISCC Data-Code (default 64). 64 Returns: Type Description DataCode Standardized ISCC DataCode object","title":"gen_data_code_v0()"},{"location":"components/code_data/#iscc_core.code_data.soft_hash_data_v0","text":"Create a similarity preserving Data-Hash digest Parameters: Name Type Description Default stream Input data stream. required Returns: Type Description bytes 256-bit Data-Hash (soft-hash) digest used as body for Data-Code","title":"soft_hash_data_v0()"},{"location":"components/code_instance/","text":"ISCC Instance-Code Classes InstanceHasher Incremental Instance-Hash generator. Methods push ( self , data ) Push data to the Instance-Hash generator. Parameters: Name Type Description Default data Data Data to be hashed required digest ( self ) Return Instance-Hash Returns: Type Description bytes Instance-Hash digest code ( self , bits = 64 ) Encode digest as an ISCC Instance-Code component. Parameters: Name Type Description Default bits int Number of bits for the ISCC Instance-Code 64 Returns: Type Description str ISCC Instance-Code InstanceHasherV0 Incremental Instance-Hash generator. Methods push ( self , data ) Push data to the Instance-Hash generator. Parameters: Name Type Description Default data Data Data to be hashed required digest ( self ) Return Instance-Hash Returns: Type Description bytes Instance-Hash digest code ( self , bits = 64 ) Encode digest as an ISCC Instance-Code component. Parameters: Name Type Description Default bits int Number of bits for the ISCC Instance-Code 64 Returns: Type Description str ISCC Instance-Code Functions gen_instance_code ( stream , bits = 64 ) Create an ISCC Instance-Code with the latest standard algorithm. Parameters: Name Type Description Default stream Stream Binary data stream for Instance-Code generation required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description InstanceCode InstanceCode with properties: code, datahash, filesize gen_instance_code_v0 ( stream , bits = 64 ) Create an ISCC Instance-Code with algorithm v0. Parameters: Name Type Description Default stream Stream Binary data stream for Instance-Code generation required bits int Bit-length of resulting Instance-Code (multiple of 64) 64 Returns: Type Description InstanceCode InstanceCode with properties: code, datahash, filesize hash_instance_v0 ( stream ) Create 256-bit hash digest for the Instance-Code body Parameters: Name Type Description Default stream Stream Binary data stream for hash generation. required Returns: Type Description bytes 256-bit Instance-Hash digest used as body of Instance-Code","title":"Instance-Code"},{"location":"components/code_instance/#iscc-instance-code","text":"","title":"ISCC Instance-Code"},{"location":"components/code_instance/#iscc_core.code_instance-classes","text":"","title":"Classes"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasher","text":"Incremental Instance-Hash generator.","title":"InstanceHasher"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasher-methods","text":"","title":"Methods"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasher.push","text":"Push data to the Instance-Hash generator. Parameters: Name Type Description Default data Data Data to be hashed required","title":"push()"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasher.digest","text":"Return Instance-Hash Returns: Type Description bytes Instance-Hash digest","title":"digest()"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasher.code","text":"Encode digest as an ISCC Instance-Code component. Parameters: Name Type Description Default bits int Number of bits for the ISCC Instance-Code 64 Returns: Type Description str ISCC Instance-Code","title":"code()"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasherV0","text":"Incremental Instance-Hash generator.","title":"InstanceHasherV0"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasherV0-methods","text":"","title":"Methods"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasherV0.push","text":"Push data to the Instance-Hash generator. Parameters: Name Type Description Default data Data Data to be hashed required","title":"push()"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasherV0.digest","text":"Return Instance-Hash Returns: Type Description bytes Instance-Hash digest","title":"digest()"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasherV0.code","text":"Encode digest as an ISCC Instance-Code component. Parameters: Name Type Description Default bits int Number of bits for the ISCC Instance-Code 64 Returns: Type Description str ISCC Instance-Code","title":"code()"},{"location":"components/code_instance/#iscc_core.code_instance-functions","text":"","title":"Functions"},{"location":"components/code_instance/#iscc_core.code_instance.gen_instance_code","text":"Create an ISCC Instance-Code with the latest standard algorithm. Parameters: Name Type Description Default stream Stream Binary data stream for Instance-Code generation required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description InstanceCode InstanceCode with properties: code, datahash, filesize","title":"gen_instance_code()"},{"location":"components/code_instance/#iscc_core.code_instance.gen_instance_code_v0","text":"Create an ISCC Instance-Code with algorithm v0. Parameters: Name Type Description Default stream Stream Binary data stream for Instance-Code generation required bits int Bit-length of resulting Instance-Code (multiple of 64) 64 Returns: Type Description InstanceCode InstanceCode with properties: code, datahash, filesize","title":"gen_instance_code_v0()"},{"location":"components/code_instance/#iscc_core.code_instance.hash_instance_v0","text":"Create 256-bit hash digest for the Instance-Code body Parameters: Name Type Description Default stream Stream Binary data stream for hash generation. required Returns: Type Description bytes 256-bit Instance-Hash digest used as body of Instance-Code","title":"hash_instance_v0()"},{"location":"components/code_meta/","text":"ISCC - Meta-Code The Meta-Code is the first component of a canonical ISCC. It is calculated as a similarity preserving hash from the metadata of a digital asset. The purpose of the Meta-Code is the discovery of digital assets with similar metadata or spelling mistakes. The metadata supplied to the algorithm is called seed metadata . Seed metadata is composed of a title and an optional generic extra -field that contains descriptive, industry-sector or use-case specific metadata in textual or binary form (e.g. file headers). We do not prescribe a particular schema. Functions gen_meta_code ( title , extra = None , bits = 64 ) Create an ISCC Meta-Code using the latest standard algorithm. Applications that generate ISCCs should prioritize explicitly passed title information. If not available they should try to extract a title form the digital asset itself. If extraction fails, the application should resort to a normalized filename before falling back to an empty string. Optional additional metadata may be supplied via the extra -field. The input can be: A textual description of the identified work for disambiguation purposes Structured (JSON) metadata conforming to an industry specific metadata schema Raw bitstream file headers automatically extracted binary file headers A pre-existing industry-specific identifier string Note It is recommended to use the minimal metadata required to disambiguate the work manifested by the digital asset. Parameters: Name Type Description Default title str Title of the work manifested by the digital asset required extra Union[str,bytes,None] Optional metadata for disambiguation None bits int Bit-length of resulting Meta-Code (multiple of 64) 64 Returns: Type Description MetaCode ISCC Meta-Code gen_meta_code_v0 ( title , extra = None , bits = 64 ) Create an ISCC Meta-Code with the algorithm version 0. Parameters: Name Type Description Default title str Title of the work manifested by the digital asset required extra Union[str,bytes,None] Optional metadata for disambiguation None bits int Bit-length of resulting Meta-Code (multiple of 64) 64 Returns: Type Description MetaCode ISCC Meta-Code soft_hash_meta_v0 ( title , extra = None ) Calculate simmilarity preserving 256-bit hash digest from asset metadata. Textual input should be stripped of markup, normalized and trimmed before hashing. Json metadata should be normalized with JCS Note The processing algorithm depends on the type of the extra input. If the extra field is supplied and non-empty, we create separate hashes for title and extra and interleave them in 32-bit chunks: If the input is None or an empty str / bytes object the Meta-Hash will be generated from the title -field only. If the extra -input is a non-empty text string (str) the string is lower-cased and the processing unit is an utf-8 endoded character (possibly multibyte). The resulting hash is interleaved with the title -hash. If the extra -input is a non-empty bytes object the processing is done bytewise and the resulting hash is interleaved with the title -hash. Parameters: Name Type Description Default title str Title of the work manifested in the digital asset required extra Union[str,bytes,None] Additional metadata for disambiguation None Returns: Type Description bytes 256-bit simhash digest for Meta-Code trim_text ( text , nbytes ) Trim text such that its utf-8 encoded size does not exceed nbytes .","title":"Meta-Code"},{"location":"components/code_meta/#iscc-meta-code","text":"The Meta-Code is the first component of a canonical ISCC. It is calculated as a similarity preserving hash from the metadata of a digital asset. The purpose of the Meta-Code is the discovery of digital assets with similar metadata or spelling mistakes. The metadata supplied to the algorithm is called seed metadata . Seed metadata is composed of a title and an optional generic extra -field that contains descriptive, industry-sector or use-case specific metadata in textual or binary form (e.g. file headers). We do not prescribe a particular schema.","title":"ISCC - Meta-Code"},{"location":"components/code_meta/#iscc_core.code_meta-functions","text":"","title":"Functions"},{"location":"components/code_meta/#iscc_core.code_meta.gen_meta_code","text":"Create an ISCC Meta-Code using the latest standard algorithm. Applications that generate ISCCs should prioritize explicitly passed title information. If not available they should try to extract a title form the digital asset itself. If extraction fails, the application should resort to a normalized filename before falling back to an empty string. Optional additional metadata may be supplied via the extra -field. The input can be: A textual description of the identified work for disambiguation purposes Structured (JSON) metadata conforming to an industry specific metadata schema Raw bitstream file headers automatically extracted binary file headers A pre-existing industry-specific identifier string Note It is recommended to use the minimal metadata required to disambiguate the work manifested by the digital asset. Parameters: Name Type Description Default title str Title of the work manifested by the digital asset required extra Union[str,bytes,None] Optional metadata for disambiguation None bits int Bit-length of resulting Meta-Code (multiple of 64) 64 Returns: Type Description MetaCode ISCC Meta-Code","title":"gen_meta_code()"},{"location":"components/code_meta/#iscc_core.code_meta.gen_meta_code_v0","text":"Create an ISCC Meta-Code with the algorithm version 0. Parameters: Name Type Description Default title str Title of the work manifested by the digital asset required extra Union[str,bytes,None] Optional metadata for disambiguation None bits int Bit-length of resulting Meta-Code (multiple of 64) 64 Returns: Type Description MetaCode ISCC Meta-Code","title":"gen_meta_code_v0()"},{"location":"components/code_meta/#iscc_core.code_meta.soft_hash_meta_v0","text":"Calculate simmilarity preserving 256-bit hash digest from asset metadata. Textual input should be stripped of markup, normalized and trimmed before hashing. Json metadata should be normalized with JCS Note The processing algorithm depends on the type of the extra input. If the extra field is supplied and non-empty, we create separate hashes for title and extra and interleave them in 32-bit chunks: If the input is None or an empty str / bytes object the Meta-Hash will be generated from the title -field only. If the extra -input is a non-empty text string (str) the string is lower-cased and the processing unit is an utf-8 endoded character (possibly multibyte). The resulting hash is interleaved with the title -hash. If the extra -input is a non-empty bytes object the processing is done bytewise and the resulting hash is interleaved with the title -hash. Parameters: Name Type Description Default title str Title of the work manifested in the digital asset required extra Union[str,bytes,None] Additional metadata for disambiguation None Returns: Type Description bytes 256-bit simhash digest for Meta-Code","title":"soft_hash_meta_v0()"},{"location":"components/code_meta/#iscc_core.code_meta.trim_text","text":"Trim text such that its utf-8 encoded size does not exceed nbytes .","title":"trim_text()"},{"location":"components/content/","text":"ISCC - Content Codes","title":"ISCC - Content Codes"},{"location":"components/content/#iscc-content-codes","text":"","title":"ISCC - Content Codes"},{"location":"components/content/code_content_audio/","text":"ISCC - Content-Code-Audio A similarity preserving hash for audio content (soft hash). Creates a ContentCodeAudio object that provides a code -field and a duration -field. The Content-Code Audio is generated from a Chromaprint fingerprint provided as a vector of 32-bit signed integers. Chromaprints are extracted with fpcalc 1.5.0 using the following command line parameters: $ fpcalc -raw -json -signed -length 0 myaudiofile.mp3 Functions gen_audio_code ( cv , bits = 64 ) Create an ISCC Content-Code Audio with the latest standard algorithm. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required bits int Bit-length resulting Content-Code Audio (multiple of 64) 64 Returns: Type Description ContentCodeAudio ContentCodeAudio object gen_audio_code_v0 ( cv , bits = 64 ) Create an ISCC Content-Code Audio with algorithm v0. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required bits int Bit-length resulting Content-Code Audio (multiple of 64) 64 Returns: Type Description ContentCodeAudio ContentCodeAudio object soft_hash_audio_v0 ( cv ) Create 256-bit audio similarity hash from a chromaprint vector. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required Returns: Type Description bytes 256-bit Audio-Hash digest","title":"Audio"},{"location":"components/content/code_content_audio/#iscc-content-code-audio","text":"A similarity preserving hash for audio content (soft hash). Creates a ContentCodeAudio object that provides a code -field and a duration -field. The Content-Code Audio is generated from a Chromaprint fingerprint provided as a vector of 32-bit signed integers. Chromaprints are extracted with fpcalc 1.5.0 using the following command line parameters: $ fpcalc -raw -json -signed -length 0 myaudiofile.mp3","title":"ISCC - Content-Code-Audio"},{"location":"components/content/code_content_audio/#iscc_core.code_content_audio-functions","text":"","title":"Functions"},{"location":"components/content/code_content_audio/#iscc_core.code_content_audio.gen_audio_code","text":"Create an ISCC Content-Code Audio with the latest standard algorithm. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required bits int Bit-length resulting Content-Code Audio (multiple of 64) 64 Returns: Type Description ContentCodeAudio ContentCodeAudio object","title":"gen_audio_code()"},{"location":"components/content/code_content_audio/#iscc_core.code_content_audio.gen_audio_code_v0","text":"Create an ISCC Content-Code Audio with algorithm v0. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required bits int Bit-length resulting Content-Code Audio (multiple of 64) 64 Returns: Type Description ContentCodeAudio ContentCodeAudio object","title":"gen_audio_code_v0()"},{"location":"components/content/code_content_audio/#iscc_core.code_content_audio.soft_hash_audio_v0","text":"Create 256-bit audio similarity hash from a chromaprint vector. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required Returns: Type Description bytes 256-bit Audio-Hash digest","title":"soft_hash_audio_v0()"},{"location":"components/content/code_content_image/","text":"ISCC - Content-Code-Image A similarity preserving perceptual hash for images. The ISCC Content-Code Image is created by calculating a discrete cosine transform on normalized image-pixels and comparing the values from the upper left area of the dct-matrix against their median values to set the hash-bits. Images must be normalized before using gen_image_code. Prepare images as follows: Transpose image according to EXIF Orientation Add gray background to image if it has alpha transparency (gray value 126) Crop empty borders of image Convert image to grayscale Resize image to 32x32 Flatten 32x32 matrix to an array of 1024 grayscale (uint8) pixel values Functions gen_image_code ( pixels , bits = 64 ) Create an ISCC Content-Code Image with the latest standard algorithm. Parameters: Name Type Description Default pixels Sequence[int] Normalized image pixels (32x32 flattened gray values). required bits int Bit-length of ISCC Content-Code Image (default 64). 64 Returns: Type Description ContentCodeImage ISCC Content-Code Image. gen_image_code_v0 ( pixels , bits = 64 ) Create an ISCC Content-Code Image with algorithm v0. Parameters: Name Type Description Default pixels Sequence[int] Normalized image pixels (32x32 flattened gray values) required bits int Bit-length of ISCC Content-Code Image (default 64). 64 Returns: Type Description ContentCodeImage ISCC Content-Code Image. soft_hash_image_v0 ( pixels , bits = 64 ) Calculate image hash from normalized grayscale pixel sequence of length 1024. Parameters: Name Type Description Default pixels Sequence[int] required bits int Bit-length of image hash (default 64). 64 Returns: Type Description bytes Similarity preserving Image-Hash digest.","title":"Image"},{"location":"components/content/code_content_image/#iscc-content-code-image","text":"A similarity preserving perceptual hash for images. The ISCC Content-Code Image is created by calculating a discrete cosine transform on normalized image-pixels and comparing the values from the upper left area of the dct-matrix against their median values to set the hash-bits. Images must be normalized before using gen_image_code. Prepare images as follows: Transpose image according to EXIF Orientation Add gray background to image if it has alpha transparency (gray value 126) Crop empty borders of image Convert image to grayscale Resize image to 32x32 Flatten 32x32 matrix to an array of 1024 grayscale (uint8) pixel values","title":"ISCC - Content-Code-Image"},{"location":"components/content/code_content_image/#iscc_core.code_content_image-functions","text":"","title":"Functions"},{"location":"components/content/code_content_image/#iscc_core.code_content_image.gen_image_code","text":"Create an ISCC Content-Code Image with the latest standard algorithm. Parameters: Name Type Description Default pixels Sequence[int] Normalized image pixels (32x32 flattened gray values). required bits int Bit-length of ISCC Content-Code Image (default 64). 64 Returns: Type Description ContentCodeImage ISCC Content-Code Image.","title":"gen_image_code()"},{"location":"components/content/code_content_image/#iscc_core.code_content_image.gen_image_code_v0","text":"Create an ISCC Content-Code Image with algorithm v0. Parameters: Name Type Description Default pixels Sequence[int] Normalized image pixels (32x32 flattened gray values) required bits int Bit-length of ISCC Content-Code Image (default 64). 64 Returns: Type Description ContentCodeImage ISCC Content-Code Image.","title":"gen_image_code_v0()"},{"location":"components/content/code_content_image/#iscc_core.code_content_image.soft_hash_image_v0","text":"Calculate image hash from normalized grayscale pixel sequence of length 1024. Parameters: Name Type Description Default pixels Sequence[int] required bits int Bit-length of image hash (default 64). 64 Returns: Type Description bytes Similarity preserving Image-Hash digest.","title":"soft_hash_image_v0()"},{"location":"components/content/code_content_mixed/","text":"ISCC - Content-Code-Mixed A similarity hash for mixed media content. Creates a ContentCodeMixed object that provides a code -field and a parts -field that lists the input codes. Many digital assets embed multiple assets of different mediatypes in a single file. Text documents may including images, video includes audio in most cases. The ISCC Content-Code-Mixed encodes the similarity of a collection of assets of the same or different mediatypes that may occur in a multi-media asset. Applications that create mixed Content-Codes must be capable to extract embedded assets and create individual Content-Codes per asset. Functions gen_mixed_code ( codes , bits = 64 ) Create an ISCC Content-Code-Mixed with the latest standard algorithm. Parameters: Name Type Description Default codes Iterable[str] a list of Content-Codes. required bits int Target bit-length of generated Content-Code-Mixed. 64 Returns: Type Description ContentCodeMixed Similarity preserving code that aggregates multiple Content-Codes. gen_mixed_code_v0 ( codes , bits = 64 ) Create an ISCC Content-Code-Mixed with algorithm v0. If the provided codes are of mixed length they are stripped to bits length. Parameters: Name Type Description Default codes Iterable[str] a list of Content-Codes. required bits int Target bit-length of generated Content-Code-Mixed. 64 Returns: Type Description ContentCodeMixed Similarity preserving code that aggregates multiple Content-Codes. soft_hash_codes_v0 ( cc_digests , bits = 64 ) Create a similarity hash from multiple Content-Code digests. The similarity hash is created from the bodies of the input codes with the first byte of the code-header prepended. All codes must be of main-type CONTENT and have a minimum length of bits . Parameters: Name Type Description Default cc_digests Sequence[bytes] a list of Content-Code digests. required bits int Target bit-length of generated Content-Code-Mixed. 64 Returns: Type Description bytes Similarity preserving byte hash.","title":"Mixed"},{"location":"components/content/code_content_mixed/#iscc-content-code-mixed","text":"A similarity hash for mixed media content. Creates a ContentCodeMixed object that provides a code -field and a parts -field that lists the input codes. Many digital assets embed multiple assets of different mediatypes in a single file. Text documents may including images, video includes audio in most cases. The ISCC Content-Code-Mixed encodes the similarity of a collection of assets of the same or different mediatypes that may occur in a multi-media asset. Applications that create mixed Content-Codes must be capable to extract embedded assets and create individual Content-Codes per asset.","title":"ISCC - Content-Code-Mixed"},{"location":"components/content/code_content_mixed/#iscc_core.code_content_mixed-functions","text":"","title":"Functions"},{"location":"components/content/code_content_mixed/#iscc_core.code_content_mixed.gen_mixed_code","text":"Create an ISCC Content-Code-Mixed with the latest standard algorithm. Parameters: Name Type Description Default codes Iterable[str] a list of Content-Codes. required bits int Target bit-length of generated Content-Code-Mixed. 64 Returns: Type Description ContentCodeMixed Similarity preserving code that aggregates multiple Content-Codes.","title":"gen_mixed_code()"},{"location":"components/content/code_content_mixed/#iscc_core.code_content_mixed.gen_mixed_code_v0","text":"Create an ISCC Content-Code-Mixed with algorithm v0. If the provided codes are of mixed length they are stripped to bits length. Parameters: Name Type Description Default codes Iterable[str] a list of Content-Codes. required bits int Target bit-length of generated Content-Code-Mixed. 64 Returns: Type Description ContentCodeMixed Similarity preserving code that aggregates multiple Content-Codes.","title":"gen_mixed_code_v0()"},{"location":"components/content/code_content_mixed/#iscc_core.code_content_mixed.soft_hash_codes_v0","text":"Create a similarity hash from multiple Content-Code digests. The similarity hash is created from the bodies of the input codes with the first byte of the code-header prepended. All codes must be of main-type CONTENT and have a minimum length of bits . Parameters: Name Type Description Default cc_digests Sequence[bytes] a list of Content-Code digests. required bits int Target bit-length of generated Content-Code-Mixed. 64 Returns: Type Description bytes Similarity preserving byte hash.","title":"soft_hash_codes_v0()"},{"location":"components/content/code_content_text/","text":"ISCC - Content-Code-Text A similarity preserving hash for text content (soft hash). The ISCC Content-Code Text is generated from plain-text that has been extracted from different media assets. Functions gen_text_code ( text , bits = 64 ) Create an ISCC Content-Code-Text with the latest standard algorithm. Note If text input includes markup (like HTML tags) it must be removed beforehand. Parameters: Name Type Description Default text Text Plain text for Text-Code creation. required bits int Bit-length (multiple of 32) for ISCC Code Hash (default 64). 64 Returns: Type Description ContentCodeText TextCode with properties: code, characters gen_text_code_v0 ( text , bits = 64 ) Create ISCC Content-Code-Text with algorithm v0 Normalize and lowercase text. Create a Simhash from the tokens generated by a 13-character sliding window. Encode resulting byte hash with ISCC codec. Parameters: Name Type Description Default text Text Normalized text for Text-Code creation. required bits int Bit-length of ISCC Code Hash (default 64). 64 Returns: Type Description ContentCodeText TextCode with properties: code, characters normalize_text ( text ) Unicode normalization and character filtering. Decode to Unicode. Remove leading/trailing whitespace. Decompose with NFD normalization. Filter special characters and whitespace. Remove duplicate whitespace. Recombine with NFKC normalization. Parameters: Name Type Description Default text Text Plain text to be normalized. required Returns: Type Description str Normalized plain text. soft_hash_text_v0 ( text ) Create a 256-bit similarity preserving hash for text input with v0 algorithm. Text should be stripped of markup, normalized and lowercased before hash creation. Parameters: Name Type Description Default text str Plain text to be hashed. required Returns: Type Description bytes 256-bit similarity preserving byte hash.","title":"Text"},{"location":"components/content/code_content_text/#iscc-content-code-text","text":"A similarity preserving hash for text content (soft hash). The ISCC Content-Code Text is generated from plain-text that has been extracted from different media assets.","title":"ISCC - Content-Code-Text"},{"location":"components/content/code_content_text/#iscc_core.code_content_text-functions","text":"","title":"Functions"},{"location":"components/content/code_content_text/#iscc_core.code_content_text.gen_text_code","text":"Create an ISCC Content-Code-Text with the latest standard algorithm. Note If text input includes markup (like HTML tags) it must be removed beforehand. Parameters: Name Type Description Default text Text Plain text for Text-Code creation. required bits int Bit-length (multiple of 32) for ISCC Code Hash (default 64). 64 Returns: Type Description ContentCodeText TextCode with properties: code, characters","title":"gen_text_code()"},{"location":"components/content/code_content_text/#iscc_core.code_content_text.gen_text_code_v0","text":"Create ISCC Content-Code-Text with algorithm v0 Normalize and lowercase text. Create a Simhash from the tokens generated by a 13-character sliding window. Encode resulting byte hash with ISCC codec. Parameters: Name Type Description Default text Text Normalized text for Text-Code creation. required bits int Bit-length of ISCC Code Hash (default 64). 64 Returns: Type Description ContentCodeText TextCode with properties: code, characters","title":"gen_text_code_v0()"},{"location":"components/content/code_content_text/#iscc_core.code_content_text.normalize_text","text":"Unicode normalization and character filtering. Decode to Unicode. Remove leading/trailing whitespace. Decompose with NFD normalization. Filter special characters and whitespace. Remove duplicate whitespace. Recombine with NFKC normalization. Parameters: Name Type Description Default text Text Plain text to be normalized. required Returns: Type Description str Normalized plain text.","title":"normalize_text()"},{"location":"components/content/code_content_text/#iscc_core.code_content_text.soft_hash_text_v0","text":"Create a 256-bit similarity preserving hash for text input with v0 algorithm. Text should be stripped of markup, normalized and lowercased before hash creation. Parameters: Name Type Description Default text str Plain text to be hashed. required Returns: Type Description bytes 256-bit similarity preserving byte hash.","title":"soft_hash_text_v0()"},{"location":"components/content/code_content_video/","text":"ISCC - Content-Code-Video ISCC Content-Code Video The Content-Code Video is generated from MPEG-7 Video Frame Signatures. Frame Signatures can be extracted with ffmpeg (see: https://www.ffmpeg.org/) using the following command line parameters: $ ffmpeg -i video.mpg -vf fps=fps=5,signature=format=xml:filename=sig.xml -f null - The relevant frame signatures can be parsed from the following elements in sig.xml: <FrameSignature>0 0 0 1 0 0 1 0 1 1 0 0 1 1 ...</FrameSignature> Note it is also possible to extract the signatures in a more compact binary format but it requires a custom binary parser to decode the frame signaturs. Functions gen_video_code ( frame_sigs , bits = 64 ) Create an ISCC Content-Code Video with the latest standard algorithm. Parameters: Name Type Description Default frame_sigs FrameSig Sequence of MP7 frame signatures required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description ContentCodeVideo VideoCode object with code property set gen_video_code_v0 ( frame_sigs , bits = 64 ) Create an ISCC Content-Code Video with algorithm v0. Parameters: Name Type Description Default frame_sigs FrameSig Sequence of MP7 frame signatures required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description ContentCodeVideo VideoCode object with code property set soft_hash_video_v0 ( frame_sigs , bits = 64 ) Compute video hash v0 from MP7 frame signatures. Parameters: Name Type Description Default frame_sigs Sequence[Sequence[int]] 2D matrix of MP7 frame signatures required bits int Bit-length resulting Instance-Code (multiple of 64) 64","title":"Video"},{"location":"components/content/code_content_video/#iscc-content-code-video","text":"","title":"ISCC - Content-Code-Video"},{"location":"components/content/code_content_video/#iscc_core.code_content_video--iscc-content-code-video","text":"The Content-Code Video is generated from MPEG-7 Video Frame Signatures. Frame Signatures can be extracted with ffmpeg (see: https://www.ffmpeg.org/) using the following command line parameters: $ ffmpeg -i video.mpg -vf fps=fps=5,signature=format=xml:filename=sig.xml -f null - The relevant frame signatures can be parsed from the following elements in sig.xml: <FrameSignature>0 0 0 1 0 0 1 0 1 1 0 0 1 1 ...</FrameSignature> Note it is also possible to extract the signatures in a more compact binary format but it requires a custom binary parser to decode the frame signaturs.","title":"ISCC Content-Code Video"},{"location":"components/content/code_content_video/#iscc_core.code_content_video-functions","text":"","title":"Functions"},{"location":"components/content/code_content_video/#iscc_core.code_content_video.gen_video_code","text":"Create an ISCC Content-Code Video with the latest standard algorithm. Parameters: Name Type Description Default frame_sigs FrameSig Sequence of MP7 frame signatures required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description ContentCodeVideo VideoCode object with code property set","title":"gen_video_code()"},{"location":"components/content/code_content_video/#iscc_core.code_content_video.gen_video_code_v0","text":"Create an ISCC Content-Code Video with algorithm v0. Parameters: Name Type Description Default frame_sigs FrameSig Sequence of MP7 frame signatures required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description ContentCodeVideo VideoCode object with code property set","title":"gen_video_code_v0()"},{"location":"components/content/code_content_video/#iscc_core.code_content_video.soft_hash_video_v0","text":"Compute video hash v0 from MP7 frame signatures. Parameters: Name Type Description Default frame_sigs Sequence[Sequence[int]] 2D matrix of MP7 frame signatures required bits int Bit-length resulting Instance-Code (multiple of 64) 64","title":"soft_hash_video_v0()"},{"location":"options/options/","text":"Classes CoreOptions ( BaseSettings ) pydantic-model Parameters with defaults for ISCC calculations. Attributes meta_bits : int pydantic-field Default length of generated Meta-Code in bits meta_trim_title : int pydantic-field Trim title length to this mumber of bytes meta_trim_extra : int pydantic-field Trim extra to this number of bytes meta_ngram_size_title : int pydantic-field Sliding window width (characters) for title metadata meta_ngram_size_extra_text : int pydantic-field Sliding window width (characters) for textural extra metadata meta_ngram_size_extra_binary : int pydantic-field Sliding window width (bytes) for binary extra metadata text_bits : int pydantic-field Default length of generated Content-Code Text in bits text_ngram_size : int pydantic-field Number of characters per feature hash (size of sliding window) text_unicode_filter : frozenset pydantic-field Unicode categories to remove during text normalization text_whitespace : frozenset pydantic-field Common control characters considered whitespace image_bits : int pydantic-field Default length of generated Content-Code Image in bits audio_bits : int pydantic-field Default length of generated Content-Code Audio in bits video_bits : int pydantic-field Default length of generated Content-Code Video in bits data_bits : int pydantic-field Default length of generated Data-Code in bits data_avg_chunk_size : int pydantic-field Target chunk size for data chunking in number of bytes. instance_bits : int pydantic-field Default length of generated Instance-Code in bits mixed_bits : int pydantic-field Default length of generated Mixed-Code in bits io_read_size : int pydantic-field File read buffer size in bytes for hashing operations cdc_gear : Tuple pydantic-field Random gear vector Functions check_options ( opts ) Check and log if options have non-default conformance critical values","title":"Options"},{"location":"options/options/#iscc_core.options-classes","text":"","title":"Classes"},{"location":"options/options/#iscc_core.options.CoreOptions","text":"Parameters with defaults for ISCC calculations.","title":"CoreOptions"},{"location":"options/options/#iscc_core.options.CoreOptions-attributes","text":"","title":"Attributes"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_bits","text":"Default length of generated Meta-Code in bits","title":"meta_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_trim_title","text":"Trim title length to this mumber of bytes","title":"meta_trim_title"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_trim_extra","text":"Trim extra to this number of bytes","title":"meta_trim_extra"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_ngram_size_title","text":"Sliding window width (characters) for title metadata","title":"meta_ngram_size_title"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_ngram_size_extra_text","text":"Sliding window width (characters) for textural extra metadata","title":"meta_ngram_size_extra_text"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_ngram_size_extra_binary","text":"Sliding window width (bytes) for binary extra metadata","title":"meta_ngram_size_extra_binary"},{"location":"options/options/#iscc_core.options.CoreOptions.text_bits","text":"Default length of generated Content-Code Text in bits","title":"text_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.text_ngram_size","text":"Number of characters per feature hash (size of sliding window)","title":"text_ngram_size"},{"location":"options/options/#iscc_core.options.CoreOptions.text_unicode_filter","text":"Unicode categories to remove during text normalization","title":"text_unicode_filter"},{"location":"options/options/#iscc_core.options.CoreOptions.text_whitespace","text":"Common control characters considered whitespace","title":"text_whitespace"},{"location":"options/options/#iscc_core.options.CoreOptions.image_bits","text":"Default length of generated Content-Code Image in bits","title":"image_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.audio_bits","text":"Default length of generated Content-Code Audio in bits","title":"audio_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.video_bits","text":"Default length of generated Content-Code Video in bits","title":"video_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.data_bits","text":"Default length of generated Data-Code in bits","title":"data_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.data_avg_chunk_size","text":"Target chunk size for data chunking in number of bytes.","title":"data_avg_chunk_size"},{"location":"options/options/#iscc_core.options.CoreOptions.instance_bits","text":"Default length of generated Instance-Code in bits","title":"instance_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.mixed_bits","text":"Default length of generated Mixed-Code in bits","title":"mixed_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.io_read_size","text":"File read buffer size in bytes for hashing operations","title":"io_read_size"},{"location":"options/options/#iscc_core.options.CoreOptions.cdc_gear","text":"Random gear vector","title":"cdc_gear"},{"location":"options/options/#iscc_core.options-functions","text":"","title":"Functions"},{"location":"options/options/#iscc_core.options.check_options","text":"Check and log if options have non-default conformance critical values","title":"check_options()"},{"location":"schema/schema/","text":"ISCC - Schema Schema of objects returned by ISCC processing algorithms. The schemata define standard fields to be set by ISCC generating applications. This library only sets the fields for which information is available within the scope of this library. Gathering and providing values for most of the fields is left to higher level applications that handle format specific data extraction. Classes ContentCode ( IsccBase , ABC ) pydantic-model Base schema for Content-Codes. Attributes title : str pydantic-field Title as extracted from digital asset ContentCodeAudio ( ContentCode ) pydantic-model Content-Code-Audio standardized metadata model. Attributes duration : float pydantic-field Duration of audio im seconds. ContentCodeImage ( ContentCode ) pydantic-model Content-Code-Image standardized metadata model. Attributes width : int pydantic-field Width of image in number of pixels. height : int pydantic-field Height of image in number of pixels. preview : str pydantic-field URI of image preview thumbnail. ContentCodeMixed ( ContentCode ) pydantic-model Content-Code-Mixed standardized metadata model. Attributes parts : List [ str ] pydantic-field Included Content-Codes. ContentCodeText ( ContentCode ) pydantic-model Content-Code-Text standardized metadata model. Attributes characters : int pydantic-field Number of text characters (after normalize_text). language : str pydantic-field Main language of content (BCP-47). ContentCodeVideo ( ContentCode ) pydantic-model Content-Code-Video standardized metadata model. Attributes duration : float pydantic-field Duration of video im seconds. fps : float pydantic-field Frames per second. width : int pydantic-field Width of video in number of pixels. height : int pydantic-field Height of video in number of pixels. language : Union [ str , List [ str ]] pydantic-field Main language of video (BCP 47). DataCode ( IsccBase ) pydantic-model Data-Code standardized metadata model. InstanceCode ( IsccBase ) pydantic-model Instance-Code standardized metadata model. Attributes datahash : str pydantic-field Multihash of digital asset (Blake3 by default. filesize : int pydantic-field File size in bytes. IsccBase ( BaseModel , ABC ) pydantic-model Base schema for ISCC metadata Attributes iscc : str pydantic-field required ISCC in standard encoding. code_obj property readonly Wraps the iscc string property with a Code object. Methods dict ( self , * args , * , exclude_unset = True , exclude_none = True , ** kwargs ) Change default options to exclude unset and none values. IsccCode ( IsccBase ) pydantic-model A composite ISCC Attributes version : str pydantic-field Version of ISCC Metadata Schema (SchemaVer). title : str pydantic-field The title or name of the intangible creation manifested by the identified digital asset extra : str pydantic-field Descriptive, industry-sector or use-case specific metadata (used as immutable input for Meta-Code generation). Any text string (including json or json-ld) indicative of the identity of the referent may be used. filename : str pydantic-field Filename of the referenced digital asset (automatically used as fallback if no seed_title element is specified) filesize : int pydantic-field File size of media asset in bytes. mediatype : str pydantic-field IANA Media Type (MIME type) tophash : str pydantic-field Blake3 hash over concatenation of metahash and datahash metahash : str pydantic-field Blake3 hash of metadata. datahash : str pydantic-field Blake3 hash of media file. duration : float pydantic-field Duration of audio-visual media in secondes. fps : float pydantic-field Frames per second of video assets. width : int pydantic-field Width of visual media in pixels. height : int pydantic-field Height of visual media in pixels. characters : int pydantic-field Number of text characters (code points after Unicode normalization) language : Union [ str , List [ str ]] pydantic-field Language(s) of content (BCP-47) in weighted order. preview : str pydantic-field Uri of media asset preview. IsccID ( IsccCode ) pydantic-model An ISCC Short-ID MetaCode ( IsccBase ) pydantic-model Meta-Code standardized metadata model. Attributes title : str pydantic-field Title used for Meta-Code creation. extra : str pydantic-field Extra metadata used for Meta-Code. binary : bool pydantic-field Extra metadata was supplied in binary format. metahash : str pydantic-field Blake3 cryptographic hash of metadata.","title":"Schema"},{"location":"schema/schema/#iscc-schema","text":"Schema of objects returned by ISCC processing algorithms. The schemata define standard fields to be set by ISCC generating applications. This library only sets the fields for which information is available within the scope of this library. Gathering and providing values for most of the fields is left to higher level applications that handle format specific data extraction.","title":"ISCC - Schema"},{"location":"schema/schema/#iscc_core.schema-classes","text":"","title":"Classes"},{"location":"schema/schema/#iscc_core.schema.ContentCode","text":"Base schema for Content-Codes.","title":"ContentCode"},{"location":"schema/schema/#iscc_core.schema.ContentCode-attributes","text":"","title":"Attributes"},{"location":"schema/schema/#iscc_core.schema.ContentCode.title","text":"Title as extracted from digital asset","title":"title"},{"location":"schema/schema/#iscc_core.schema.ContentCodeAudio","text":"Content-Code-Audio standardized metadata model.","title":"ContentCodeAudio"},{"location":"schema/schema/#iscc_core.schema.ContentCodeAudio-attributes","text":"","title":"Attributes"},{"location":"schema/schema/#iscc_core.schema.ContentCodeAudio.duration","text":"Duration of audio im seconds.","title":"duration"},{"location":"schema/schema/#iscc_core.schema.ContentCodeImage","text":"Content-Code-Image standardized metadata model.","title":"ContentCodeImage"},{"location":"schema/schema/#iscc_core.schema.ContentCodeImage-attributes","text":"","title":"Attributes"},{"location":"schema/schema/#iscc_core.schema.ContentCodeImage.width","text":"Width of image in number of pixels.","title":"width"},{"location":"schema/schema/#iscc_core.schema.ContentCodeImage.height","text":"Height of image in number of pixels.","title":"height"},{"location":"schema/schema/#iscc_core.schema.ContentCodeImage.preview","text":"URI of image preview thumbnail.","title":"preview"},{"location":"schema/schema/#iscc_core.schema.ContentCodeMixed","text":"Content-Code-Mixed standardized metadata model.","title":"ContentCodeMixed"},{"location":"schema/schema/#iscc_core.schema.ContentCodeMixed-attributes","text":"","title":"Attributes"},{"location":"schema/schema/#iscc_core.schema.ContentCodeMixed.parts","text":"Included Content-Codes.","title":"parts"},{"location":"schema/schema/#iscc_core.schema.ContentCodeText","text":"Content-Code-Text standardized metadata model.","title":"ContentCodeText"},{"location":"schema/schema/#iscc_core.schema.ContentCodeText-attributes","text":"","title":"Attributes"},{"location":"schema/schema/#iscc_core.schema.ContentCodeText.characters","text":"Number of text characters (after normalize_text).","title":"characters"},{"location":"schema/schema/#iscc_core.schema.ContentCodeText.language","text":"Main language of content (BCP-47).","title":"language"},{"location":"schema/schema/#iscc_core.schema.ContentCodeVideo","text":"Content-Code-Video standardized metadata model.","title":"ContentCodeVideo"},{"location":"schema/schema/#iscc_core.schema.ContentCodeVideo-attributes","text":"","title":"Attributes"},{"location":"schema/schema/#iscc_core.schema.ContentCodeVideo.duration","text":"Duration of video im seconds.","title":"duration"},{"location":"schema/schema/#iscc_core.schema.ContentCodeVideo.fps","text":"Frames per second.","title":"fps"},{"location":"schema/schema/#iscc_core.schema.ContentCodeVideo.width","text":"Width of video in number of pixels.","title":"width"},{"location":"schema/schema/#iscc_core.schema.ContentCodeVideo.height","text":"Height of video in number of pixels.","title":"height"},{"location":"schema/schema/#iscc_core.schema.ContentCodeVideo.language","text":"Main language of video (BCP 47).","title":"language"},{"location":"schema/schema/#iscc_core.schema.DataCode","text":"Data-Code standardized metadata model.","title":"DataCode"},{"location":"schema/schema/#iscc_core.schema.InstanceCode","text":"Instance-Code standardized metadata model.","title":"InstanceCode"},{"location":"schema/schema/#iscc_core.schema.InstanceCode-attributes","text":"","title":"Attributes"},{"location":"schema/schema/#iscc_core.schema.InstanceCode.datahash","text":"Multihash of digital asset (Blake3 by default.","title":"datahash"},{"location":"schema/schema/#iscc_core.schema.InstanceCode.filesize","text":"File size in bytes.","title":"filesize"},{"location":"schema/schema/#iscc_core.schema.IsccBase","text":"Base schema for ISCC metadata","title":"IsccBase"},{"location":"schema/schema/#iscc_core.schema.IsccBase-attributes","text":"","title":"Attributes"},{"location":"schema/schema/#iscc_core.schema.IsccBase.iscc","text":"ISCC in standard encoding.","title":"iscc"},{"location":"schema/schema/#iscc_core.schema.IsccBase.code_obj","text":"Wraps the iscc string property with a Code object.","title":"code_obj"},{"location":"schema/schema/#iscc_core.schema.IsccBase-methods","text":"","title":"Methods"},{"location":"schema/schema/#iscc_core.schema.IsccBase.dict","text":"Change default options to exclude unset and none values.","title":"dict()"},{"location":"schema/schema/#iscc_core.schema.IsccCode","text":"A composite ISCC","title":"IsccCode"},{"location":"schema/schema/#iscc_core.schema.IsccCode-attributes","text":"","title":"Attributes"},{"location":"schema/schema/#iscc_core.schema.IsccCode.version","text":"Version of ISCC Metadata Schema (SchemaVer).","title":"version"},{"location":"schema/schema/#iscc_core.schema.IsccCode.title","text":"The title or name of the intangible creation manifested by the identified digital asset","title":"title"},{"location":"schema/schema/#iscc_core.schema.IsccCode.extra","text":"Descriptive, industry-sector or use-case specific metadata (used as immutable input for Meta-Code generation). Any text string (including json or json-ld) indicative of the identity of the referent may be used.","title":"extra"},{"location":"schema/schema/#iscc_core.schema.IsccCode.filename","text":"Filename of the referenced digital asset (automatically used as fallback if no seed_title element is specified)","title":"filename"},{"location":"schema/schema/#iscc_core.schema.IsccCode.filesize","text":"File size of media asset in bytes.","title":"filesize"},{"location":"schema/schema/#iscc_core.schema.IsccCode.mediatype","text":"IANA Media Type (MIME type)","title":"mediatype"},{"location":"schema/schema/#iscc_core.schema.IsccCode.tophash","text":"Blake3 hash over concatenation of metahash and datahash","title":"tophash"},{"location":"schema/schema/#iscc_core.schema.IsccCode.metahash","text":"Blake3 hash of metadata.","title":"metahash"},{"location":"schema/schema/#iscc_core.schema.IsccCode.datahash","text":"Blake3 hash of media file.","title":"datahash"},{"location":"schema/schema/#iscc_core.schema.IsccCode.duration","text":"Duration of audio-visual media in secondes.","title":"duration"},{"location":"schema/schema/#iscc_core.schema.IsccCode.fps","text":"Frames per second of video assets.","title":"fps"},{"location":"schema/schema/#iscc_core.schema.IsccCode.width","text":"Width of visual media in pixels.","title":"width"},{"location":"schema/schema/#iscc_core.schema.IsccCode.height","text":"Height of visual media in pixels.","title":"height"},{"location":"schema/schema/#iscc_core.schema.IsccCode.characters","text":"Number of text characters (code points after Unicode normalization)","title":"characters"},{"location":"schema/schema/#iscc_core.schema.IsccCode.language","text":"Language(s) of content (BCP-47) in weighted order.","title":"language"},{"location":"schema/schema/#iscc_core.schema.IsccCode.preview","text":"Uri of media asset preview.","title":"preview"},{"location":"schema/schema/#iscc_core.schema.IsccID","text":"An ISCC Short-ID","title":"IsccID"},{"location":"schema/schema/#iscc_core.schema.MetaCode","text":"Meta-Code standardized metadata model.","title":"MetaCode"},{"location":"schema/schema/#iscc_core.schema.MetaCode-attributes","text":"","title":"Attributes"},{"location":"schema/schema/#iscc_core.schema.MetaCode.title","text":"Title used for Meta-Code creation.","title":"title"},{"location":"schema/schema/#iscc_core.schema.MetaCode.extra","text":"Extra metadata used for Meta-Code.","title":"extra"},{"location":"schema/schema/#iscc_core.schema.MetaCode.binary","text":"Extra metadata was supplied in binary format.","title":"binary"},{"location":"schema/schema/#iscc_core.schema.MetaCode.metahash","text":"Blake3 cryptographic hash of metadata.","title":"metahash"},{"location":"utilities/utils/","text":"Functions sliding_window ( seq , width ) Generate a sequence of equal \"width\" slices each advancing by one elemnt. All types that have a length and can be sliced are supported (list, tuple, str ...). The result type matches the type of the input sequence. Fragment slices smaller than the width at the end of the sequence are not produced. If \"witdh\" is smaller than the input sequence than one element will be returned that is shorter than the requested width. Parameters: Name Type Description Default seq Sequence Sequence of values to slide over required width int Width of sliding window in number of items required Returns: Type Description Union[Generat,] A generator of window sized items","title":"Utilities"},{"location":"utilities/utils/#iscc_core.utils-functions","text":"","title":"Functions"},{"location":"utilities/utils/#iscc_core.utils.sliding_window","text":"Generate a sequence of equal \"width\" slices each advancing by one elemnt. All types that have a length and can be sliced are supported (list, tuple, str ...). The result type matches the type of the input sequence. Fragment slices smaller than the width at the end of the sequence are not produced. If \"witdh\" is smaller than the input sequence than one element will be returned that is shorter than the requested width. Parameters: Name Type Description Default seq Sequence Sequence of values to slide over required width int Width of sliding window in number of items required Returns: Type Description Union[Generat,] A generator of window sized items","title":"sliding_window()"}]}