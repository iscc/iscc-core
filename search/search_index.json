{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview","title":"Overview"},{"location":"#overview","text":"","title":"Overview"},{"location":"algorithms/cdc/","text":"Content Defined Chunking Compatible with fastcdc Functions data_chunks ( data , utf32 , avg_chunk_size = 1024 ) A generator that yields data-dependent chunks for data . Usage Example: for chunk in data_chunks ( data ): hash ( chunk ) Parameters: Name Type Description Default data bytes Raw data for variable sized chunking. required utf32 bool If true assume we are chunking text that is utf32 encoded. required avg_chunk_size int Target chunk size in number of bytes. 1024 Returns: Type Description Union[Generat,[bytes]] A generator that yields data chunks of variable sizes. cdc_offset ( buffer , mi , ma , cs , mask_s , mask_l ) Find breakpoint offset for a given buffer. Parameters: Name Type Description Default buffer Data The data to be chunked. required mi int Minimum chunk size. required ma int Maximung chunk size. required cs int Center size. required mask_s int Small mask. required mask_l int Large mask. required Returns: Type Description int Offset of dynamic cutpoint in number of bytes. get_params ( avg_size : int ) -> tuple Calculate CDC parameters Parameters: Name Type Description Default avg_size int Target average size of chunks in number of bytes. required Returns: Type Description tuple Tuple of (min_size, max_size, center_size, mask_s, mask_l).","title":"CDC"},{"location":"algorithms/cdc/#iscc_core.cdc-functions","text":"","title":"Functions"},{"location":"algorithms/cdc/#iscc_core.cdc.data_chunks","text":"A generator that yields data-dependent chunks for data . Usage Example: for chunk in data_chunks ( data ): hash ( chunk ) Parameters: Name Type Description Default data bytes Raw data for variable sized chunking. required utf32 bool If true assume we are chunking text that is utf32 encoded. required avg_chunk_size int Target chunk size in number of bytes. 1024 Returns: Type Description Union[Generat,[bytes]] A generator that yields data chunks of variable sizes.","title":"data_chunks()"},{"location":"algorithms/cdc/#iscc_core.cdc.cdc_offset","text":"Find breakpoint offset for a given buffer. Parameters: Name Type Description Default buffer Data The data to be chunked. required mi int Minimum chunk size. required ma int Maximung chunk size. required cs int Center size. required mask_s int Small mask. required mask_l int Large mask. required Returns: Type Description int Offset of dynamic cutpoint in number of bytes.","title":"cdc_offset()"},{"location":"algorithms/cdc/#iscc_core.cdc.get_params","text":"Calculate CDC parameters Parameters: Name Type Description Default avg_size int Target average size of chunks in number of bytes. required Returns: Type Description tuple Tuple of (min_size, max_size, center_size, mask_s, mask_l).","title":"get_params()"},{"location":"algorithms/dct/","text":"Discrete Cosine Transform. Functions dct ( v ) Discrete cosine transform. See: https://www.nayuki.io/page/fast-discrete-cosine-transform-algorithms). Parameters: Name Type Description Default v Sequence[float] Input vector for DCT calculation. required Returns: Type Description List DCT Transformed vector.","title":"DCT"},{"location":"algorithms/dct/#iscc_core.dct-functions","text":"","title":"Functions"},{"location":"algorithms/dct/#iscc_core.dct.dct","text":"Discrete cosine transform. See: https://www.nayuki.io/page/fast-discrete-cosine-transform-algorithms). Parameters: Name Type Description Default v Sequence[float] Input vector for DCT calculation. required Returns: Type Description List DCT Transformed vector.","title":"dct()"},{"location":"algorithms/minhash/","text":"Minimum Hash Functions minhash ( features ) Calculate a 64 dimensional minhash integer vector. minhash_64 ( features ) Create 64-bit minimum hash digest. minhash_256 ( features ) Create 256-bit minimum hash digest. compress ( mhash , lsb = 4 ) Compress minhash vector to byte hash-digest. Concatenates lsb number of least significant bits from each integer in mhash . For example an mhash with 64 integers will produce a 256-bit summary of the minhash vector.","title":"Minhash"},{"location":"algorithms/minhash/#iscc_core.minhash-functions","text":"","title":"Functions"},{"location":"algorithms/minhash/#iscc_core.minhash.minhash","text":"Calculate a 64 dimensional minhash integer vector.","title":"minhash()"},{"location":"algorithms/minhash/#iscc_core.minhash.minhash_64","text":"Create 64-bit minimum hash digest.","title":"minhash_64()"},{"location":"algorithms/minhash/#iscc_core.minhash.minhash_256","text":"Create 256-bit minimum hash digest.","title":"minhash_256()"},{"location":"algorithms/minhash/#iscc_core.minhash.compress","text":"Compress minhash vector to byte hash-digest. Concatenates lsb number of least significant bits from each integer in mhash . For example an mhash with 64 integers will produce a 256-bit summary of the minhash vector.","title":"compress()"},{"location":"algorithms/simhash/","text":"Functions similarity_hash ( hash_digests ) Creates a similarity preserving hash from a sequence of equal sized hash digests. Parameters: Name Type Description Default hash_digests list A sequence of equaly sized byte-hashes. required Returns: Type Description bytes Similarity byte-hash","title":"Simhash"},{"location":"algorithms/simhash/#iscc_core.simhash-functions","text":"","title":"Functions"},{"location":"algorithms/simhash/#iscc_core.simhash.similarity_hash","text":"Creates a similarity preserving hash from a sequence of equal sized hash digests. Parameters: Name Type Description Default hash_digests list A sequence of equaly sized byte-hashes. required Returns: Type Description bytes Similarity byte-hash","title":"similarity_hash()"},{"location":"algorithms/wtahash/","text":"Winner Takes All Hash Functions wtahash ( vec : Sequence [ float ]) -> bytes Calculate 256-bit WTA Hash for vector with 380 values (MP7 frame signature).","title":"WTAHash"},{"location":"algorithms/wtahash/#iscc_core.wtahash-functions","text":"","title":"Functions"},{"location":"algorithms/wtahash/#iscc_core.wtahash.wtahash","text":"Calculate 256-bit WTA Hash for vector with 380 values (MP7 frame signature).","title":"wtahash()"},{"location":"codec/codec/","text":"ISCC - Codec The iscc_core.codec module provides encoding, decoding and transcoding related functions. ISCC Component Structure: Header: <type> <subtype> <version> <length> each coded as a variable-length 4-bit sequence. Body: <hash-digest> with number of bits as indicated by <length> Classes Code Convenience class to handle different representations of an ISCC. Attributes code : str property readonly Standard base32 representation of code. bytes : bytes property readonly Raw bytes of code (including header). hex : str property readonly Hex representation of code (including header). uint : int property readonly Integer representation of code (including header) type_id : str property readonly A unique composite type-id (use as name to index codes seperately). explain : str property readonly Human readble representation of code header. hash_bytes : < property object at 0x0000017F6B6584F0 > property readonly Byte representation of code (without header) hash_hex : str property readonly Hex string representation of code (without header). hash_bits : str property readonly String of 0,1 representing the bits of the code (without header). hash_ints : List [ int ] property readonly List of 0,1 integers representing the bits of the code (without header). hash_uint : int property readonly Unsinged integer representation of the code (without header). hash_ba : frozenbitarray property readonly Bitarray object of the code (without header). header_bytes : < property object at 0x0000017F6B6584F0 > property readonly Byte representation of header prefix of the code maintype : MT property readonly Enum maintype of code. subtype : Union [ iscc_core . codec . ST , iscc_core . codec . ST_CC ] property readonly Enum subtype of code. version : VS property readonly Enum version of code. length : int property readonly Length of code hash in number of bits (without header). Methods __init__ ( self , code ) special Initialize a Code object from any kind of representation of an ISCC. Parameters: Name Type Description Default code AnyISCC Any valid representation of an ISCC required rnd ( mt = None , bits = 64 , data = None ) classmethod Returns a syntactically correct random code (no SID support yet) __xor__ ( self , other ) -> int special Use XOR operator for hamming distance calculation. LN ( IntEnum ) ISCC length in bits MT ( IntEnum ) ISCC MainTypes ST ( IntEnum ) Generic SubTypes ST_CC ( IntEnum ) SubTypes for Content-Codes VS ( IntEnum ) ISCC code Versions Functions write_header ( mtype , stype , version = 0 , length = 64 ) Encodes header values with nibble-sized (4-bit) variable-length encoding. The result is minimum 2 and maximum 8 bytes long. If the final count of nibbles is uneven it is padded with 4-bit 0000 at the end. Parameters: Name Type Description Default mtype int Main-type of component. required stype int Sub-type of component. required version int Version of component algorithm. 0 length int Length of component in number of bits (multiple of 32) 64 Returns: Type Description bytes Byte encoded ISCC header. read_header ( data ) Decodes varnibble encoded header and returns it together with remaining bytes. Parameters: Name Type Description Default data bytes ISCC bytes digest required Returns: Type Description (type, subtype, version, length, remaining bytes) encode_base32 ( data ) Standard RFC4648 base32 encoding without padding. decode_base32 ( code ) Standard RFC4648 base32 decoding without padding and with casefolding. encode_base64 ( data : bytes ) -> str Standard RFC4648 base64url encoding without padding. decode_base64 ( code : str ) -> bytes Standard RFC4648 base64url decoding without padding. encode_component ( mtype , stype , version , length , digest ) Encode a ISCC component inlcuding header and body with standard base32 encoding. Note If digest has more bits than specified by length it wil be truncated. Parameters: Name Type Description Default mtype int Main-type of component. required stype int Sub-type of component. required version int Version of component algorithm. required length int Length of component in number of bits (multiple of 32) required digest bytes The hash digest of the component. required Returns: Type Description str Base32 encoded component code. clean ( iscc ) Cleanup ISCC String. Removes leading scheme and dashes. compose ( codes ) Combine/compress componets to a code of type ISCC (canonical 4-component form). Parameters: Name Type Description Default codes Iterable[AnyISCC] A sequence of Meta, Content, Data, Instance codes. required decompose ( iscc_code ) Decompose a canonical ISCC into a list of singular componet codes.","title":"Codec"},{"location":"codec/codec/#iscc-codec","text":"The iscc_core.codec module provides encoding, decoding and transcoding related functions.","title":"ISCC - Codec"},{"location":"codec/codec/#iscc_core.codec--iscc-component-structure","text":"Header: <type> <subtype> <version> <length> each coded as a variable-length 4-bit sequence. Body: <hash-digest> with number of bits as indicated by <length>","title":"ISCC Component Structure:"},{"location":"codec/codec/#iscc_core.codec-classes","text":"","title":"Classes"},{"location":"codec/codec/#iscc_core.codec.Code","text":"Convenience class to handle different representations of an ISCC.","title":"Code"},{"location":"codec/codec/#iscc_core.codec.Code-attributes","text":"","title":"Attributes"},{"location":"codec/codec/#iscc_core.codec.Code.code","text":"Standard base32 representation of code.","title":"code"},{"location":"codec/codec/#iscc_core.codec.Code.bytes","text":"Raw bytes of code (including header).","title":"bytes"},{"location":"codec/codec/#iscc_core.codec.Code.hex","text":"Hex representation of code (including header).","title":"hex"},{"location":"codec/codec/#iscc_core.codec.Code.uint","text":"Integer representation of code (including header)","title":"uint"},{"location":"codec/codec/#iscc_core.codec.Code.type_id","text":"A unique composite type-id (use as name to index codes seperately).","title":"type_id"},{"location":"codec/codec/#iscc_core.codec.Code.explain","text":"Human readble representation of code header.","title":"explain"},{"location":"codec/codec/#iscc_core.codec.Code.hash_bytes","text":"Byte representation of code (without header)","title":"hash_bytes"},{"location":"codec/codec/#iscc_core.codec.Code.hash_hex","text":"Hex string representation of code (without header).","title":"hash_hex"},{"location":"codec/codec/#iscc_core.codec.Code.hash_bits","text":"String of 0,1 representing the bits of the code (without header).","title":"hash_bits"},{"location":"codec/codec/#iscc_core.codec.Code.hash_ints","text":"List of 0,1 integers representing the bits of the code (without header).","title":"hash_ints"},{"location":"codec/codec/#iscc_core.codec.Code.hash_uint","text":"Unsinged integer representation of the code (without header).","title":"hash_uint"},{"location":"codec/codec/#iscc_core.codec.Code.hash_ba","text":"Bitarray object of the code (without header).","title":"hash_ba"},{"location":"codec/codec/#iscc_core.codec.Code.header_bytes","text":"Byte representation of header prefix of the code","title":"header_bytes"},{"location":"codec/codec/#iscc_core.codec.Code.maintype","text":"Enum maintype of code.","title":"maintype"},{"location":"codec/codec/#iscc_core.codec.Code.subtype","text":"Enum subtype of code.","title":"subtype"},{"location":"codec/codec/#iscc_core.codec.Code.version","text":"Enum version of code.","title":"version"},{"location":"codec/codec/#iscc_core.codec.Code.length","text":"Length of code hash in number of bits (without header).","title":"length"},{"location":"codec/codec/#iscc_core.codec.Code-methods","text":"","title":"Methods"},{"location":"codec/codec/#iscc_core.codec.Code.__init__","text":"Initialize a Code object from any kind of representation of an ISCC. Parameters: Name Type Description Default code AnyISCC Any valid representation of an ISCC required","title":"__init__()"},{"location":"codec/codec/#iscc_core.codec.Code.rnd","text":"Returns a syntactically correct random code (no SID support yet)","title":"rnd()"},{"location":"codec/codec/#iscc_core.codec.Code.__xor__","text":"Use XOR operator for hamming distance calculation.","title":"__xor__()"},{"location":"codec/codec/#iscc_core.codec.LN","text":"ISCC length in bits","title":"LN"},{"location":"codec/codec/#iscc_core.codec.MT","text":"ISCC MainTypes","title":"MT"},{"location":"codec/codec/#iscc_core.codec.ST","text":"Generic SubTypes","title":"ST"},{"location":"codec/codec/#iscc_core.codec.ST_CC","text":"SubTypes for Content-Codes","title":"ST_CC"},{"location":"codec/codec/#iscc_core.codec.VS","text":"ISCC code Versions","title":"VS"},{"location":"codec/codec/#iscc_core.codec-functions","text":"","title":"Functions"},{"location":"codec/codec/#iscc_core.codec.write_header","text":"Encodes header values with nibble-sized (4-bit) variable-length encoding. The result is minimum 2 and maximum 8 bytes long. If the final count of nibbles is uneven it is padded with 4-bit 0000 at the end. Parameters: Name Type Description Default mtype int Main-type of component. required stype int Sub-type of component. required version int Version of component algorithm. 0 length int Length of component in number of bits (multiple of 32) 64 Returns: Type Description bytes Byte encoded ISCC header.","title":"write_header()"},{"location":"codec/codec/#iscc_core.codec.read_header","text":"Decodes varnibble encoded header and returns it together with remaining bytes. Parameters: Name Type Description Default data bytes ISCC bytes digest required Returns: Type Description (type, subtype, version, length, remaining bytes)","title":"read_header()"},{"location":"codec/codec/#iscc_core.codec.encode_base32","text":"Standard RFC4648 base32 encoding without padding.","title":"encode_base32()"},{"location":"codec/codec/#iscc_core.codec.decode_base32","text":"Standard RFC4648 base32 decoding without padding and with casefolding.","title":"decode_base32()"},{"location":"codec/codec/#iscc_core.codec.encode_base64","text":"Standard RFC4648 base64url encoding without padding.","title":"encode_base64()"},{"location":"codec/codec/#iscc_core.codec.decode_base64","text":"Standard RFC4648 base64url decoding without padding.","title":"decode_base64()"},{"location":"codec/codec/#iscc_core.codec.encode_component","text":"Encode a ISCC component inlcuding header and body with standard base32 encoding. Note If digest has more bits than specified by length it wil be truncated. Parameters: Name Type Description Default mtype int Main-type of component. required stype int Sub-type of component. required version int Version of component algorithm. required length int Length of component in number of bits (multiple of 32) required digest bytes The hash digest of the component. required Returns: Type Description str Base32 encoded component code.","title":"encode_component()"},{"location":"codec/codec/#iscc_core.codec.clean","text":"Cleanup ISCC String. Removes leading scheme and dashes.","title":"clean()"},{"location":"codec/codec/#iscc_core.codec.compose","text":"Combine/compress componets to a code of type ISCC (canonical 4-component form). Parameters: Name Type Description Default codes Iterable[AnyISCC] A sequence of Meta, Content, Data, Instance codes. required","title":"compose()"},{"location":"codec/codec/#iscc_core.codec.decompose","text":"Decompose a canonical ISCC into a list of singular componet codes.","title":"decompose()"},{"location":"components/","text":"ISCC - Components A standard ISCC-Code is build from multiple components. Each component serve a different purpose.","title":"ISCC - Components"},{"location":"components/#iscc-components","text":"A standard ISCC-Code is build from multiple components. Each component serve a different purpose.","title":"ISCC - Components"},{"location":"components/code_data/","text":"ISCC - Data-Code A similarity perserving hash for binary data (soft hash). Classes DataHasher Incremental Data-Hash generator. Methods push ( self , data ) Push data to the Data-Hash generator. digest ( self ) Calculate 256-bit minhash digest from feature hashes. features ( self ) Calculate and encode granular feature hashes. Returns: Type Description List[str] Base64 encoded granular features (64-bit soft hashes) sizes ( self ) Calculate sizes of granular feature chunks Returns: Type Description List[int] List of sizes of granular features in number of bytes DataHasherV0 Incremental Data-Hash generator. Methods push ( self , data ) Push data to the Data-Hash generator. digest ( self ) Calculate 256-bit minhash digest from feature hashes. features ( self ) Calculate and encode granular feature hashes. Returns: Type Description List[str] Base64 encoded granular features (64-bit soft hashes) sizes ( self ) Calculate sizes of granular feature chunks Returns: Type Description List[int] List of sizes of granular features in number of bytes Functions gen_data_code ( stream , bits = 64 , granular = False ) Create a similarity preserving ISCC Data-Code with the latest standard algorithm. Parameters: Name Type Description Default stream Stream Input data stream. required bits int Bit-length of ISCC Data-Code (default 64). 64 granular bool Calculate additional granular data-features False Returns: Type Description DataCode ISCC Data-Code with properties: code, features, sizes gen_data_code_v0 ( stream , bits = 64 , granular = False ) Create an ISCC Data-Code with algorithm v0. Parameters: Name Type Description Default stream Stream Input data stream. required bits int Bit-length of ISCC Data-Code (default 64). 64 granular bool Calculate additional granular data-features False Returns: Type Description DataCode ISCC DataCode with properties: code, features, sizes soft_hash_data_v0 ( stream , granular = False ) Create a similarity preserving Data-Hash digest Parameters: Name Type Description Default stream Input data stream. required granular bool Calculate additional granular data-features False Returns: Type Description Union[bytes, Tuple[bytes, List[str], List[int]]] 256-bit data soft-hash (if granular: a tuple of digest, features, sizes)","title":"Data-Code"},{"location":"components/code_data/#iscc-data-code","text":"A similarity perserving hash for binary data (soft hash).","title":"ISCC - Data-Code"},{"location":"components/code_data/#iscc_core.code_data-classes","text":"","title":"Classes"},{"location":"components/code_data/#iscc_core.code_data.DataHasher","text":"Incremental Data-Hash generator.","title":"DataHasher"},{"location":"components/code_data/#iscc_core.code_data.DataHasher-methods","text":"","title":"Methods"},{"location":"components/code_data/#iscc_core.code_data.DataHasher.push","text":"Push data to the Data-Hash generator.","title":"push()"},{"location":"components/code_data/#iscc_core.code_data.DataHasher.digest","text":"Calculate 256-bit minhash digest from feature hashes.","title":"digest()"},{"location":"components/code_data/#iscc_core.code_data.DataHasher.features","text":"Calculate and encode granular feature hashes. Returns: Type Description List[str] Base64 encoded granular features (64-bit soft hashes)","title":"features()"},{"location":"components/code_data/#iscc_core.code_data.DataHasher.sizes","text":"Calculate sizes of granular feature chunks Returns: Type Description List[int] List of sizes of granular features in number of bytes","title":"sizes()"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0","text":"Incremental Data-Hash generator.","title":"DataHasherV0"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0-methods","text":"","title":"Methods"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0.push","text":"Push data to the Data-Hash generator.","title":"push()"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0.digest","text":"Calculate 256-bit minhash digest from feature hashes.","title":"digest()"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0.features","text":"Calculate and encode granular feature hashes. Returns: Type Description List[str] Base64 encoded granular features (64-bit soft hashes)","title":"features()"},{"location":"components/code_data/#iscc_core.code_data.DataHasherV0.sizes","text":"Calculate sizes of granular feature chunks Returns: Type Description List[int] List of sizes of granular features in number of bytes","title":"sizes()"},{"location":"components/code_data/#iscc_core.code_data-functions","text":"","title":"Functions"},{"location":"components/code_data/#iscc_core.code_data.gen_data_code","text":"Create a similarity preserving ISCC Data-Code with the latest standard algorithm. Parameters: Name Type Description Default stream Stream Input data stream. required bits int Bit-length of ISCC Data-Code (default 64). 64 granular bool Calculate additional granular data-features False Returns: Type Description DataCode ISCC Data-Code with properties: code, features, sizes","title":"gen_data_code()"},{"location":"components/code_data/#iscc_core.code_data.gen_data_code_v0","text":"Create an ISCC Data-Code with algorithm v0. Parameters: Name Type Description Default stream Stream Input data stream. required bits int Bit-length of ISCC Data-Code (default 64). 64 granular bool Calculate additional granular data-features False Returns: Type Description DataCode ISCC DataCode with properties: code, features, sizes","title":"gen_data_code_v0()"},{"location":"components/code_data/#iscc_core.code_data.soft_hash_data_v0","text":"Create a similarity preserving Data-Hash digest Parameters: Name Type Description Default stream Input data stream. required granular bool Calculate additional granular data-features False Returns: Type Description Union[bytes, Tuple[bytes, List[str], List[int]]] 256-bit data soft-hash (if granular: a tuple of digest, features, sizes)","title":"soft_hash_data_v0()"},{"location":"components/code_instance/","text":"ISCC Instance-Code Classes InstanceHasher Incremental Instance-Hash generator. Methods push ( self , data ) Push data to the Instance-Hash generator. Parameters: Name Type Description Default data Data Data to be hashed required digest ( self ) Return Instance-Hash Returns: Type Description bytes Instance-Hash digest InstanceHasherV0 Incremental Instance-Hash generator. Methods push ( self , data ) Push data to the Instance-Hash generator. Parameters: Name Type Description Default data Data Data to be hashed required digest ( self ) Return Instance-Hash Returns: Type Description bytes Instance-Hash digest Functions gen_instance_code ( stream , bits = 64 ) Create an ISCC Instance-Code with the latest standard algorithm. Parameters: Name Type Description Default stream Stream Binary data stream for Instance-Code generation required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description InstanceCode InstanceCode with properties: code, datahash, filesize gen_instance_code_v0 ( stream , bits = 64 ) Create an ISCC Instance-Code with algorithm v0. Parameters: Name Type Description Default stream Stream Binary data stream for Instance-Code generation required bits int Bit-length of resulting Instance-Code (multiple of 64) 64 Returns: Type Description InstanceCode InstanceCode with properties: code, datahash, filesize hash_instance_v0 ( stream ) Create 256-bit hash digest for the Instance-Code body Parameters: Name Type Description Default stream Stream Binary data stream for hash generation. required Returns: Type Description Tuple[bytes, int] Tuple of 256-bit Instance-Hash digest and filesize in bytes","title":"Instance-Code"},{"location":"components/code_instance/#iscc-instance-code","text":"","title":"ISCC Instance-Code"},{"location":"components/code_instance/#iscc_core.code_instance-classes","text":"","title":"Classes"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasher","text":"Incremental Instance-Hash generator.","title":"InstanceHasher"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasher-methods","text":"","title":"Methods"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasher.push","text":"Push data to the Instance-Hash generator. Parameters: Name Type Description Default data Data Data to be hashed required","title":"push()"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasher.digest","text":"Return Instance-Hash Returns: Type Description bytes Instance-Hash digest","title":"digest()"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasherV0","text":"Incremental Instance-Hash generator.","title":"InstanceHasherV0"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasherV0-methods","text":"","title":"Methods"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasherV0.push","text":"Push data to the Instance-Hash generator. Parameters: Name Type Description Default data Data Data to be hashed required","title":"push()"},{"location":"components/code_instance/#iscc_core.code_instance.InstanceHasherV0.digest","text":"Return Instance-Hash Returns: Type Description bytes Instance-Hash digest","title":"digest()"},{"location":"components/code_instance/#iscc_core.code_instance-functions","text":"","title":"Functions"},{"location":"components/code_instance/#iscc_core.code_instance.gen_instance_code","text":"Create an ISCC Instance-Code with the latest standard algorithm. Parameters: Name Type Description Default stream Stream Binary data stream for Instance-Code generation required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description InstanceCode InstanceCode with properties: code, datahash, filesize","title":"gen_instance_code()"},{"location":"components/code_instance/#iscc_core.code_instance.gen_instance_code_v0","text":"Create an ISCC Instance-Code with algorithm v0. Parameters: Name Type Description Default stream Stream Binary data stream for Instance-Code generation required bits int Bit-length of resulting Instance-Code (multiple of 64) 64 Returns: Type Description InstanceCode InstanceCode with properties: code, datahash, filesize","title":"gen_instance_code_v0()"},{"location":"components/code_instance/#iscc_core.code_instance.hash_instance_v0","text":"Create 256-bit hash digest for the Instance-Code body Parameters: Name Type Description Default stream Stream Binary data stream for hash generation. required Returns: Type Description Tuple[bytes, int] Tuple of 256-bit Instance-Hash digest and filesize in bytes","title":"hash_instance_v0()"},{"location":"components/code_meta/","text":"ISCC - Meta-Code The Meta-Code is the first component of a canonical ISCC. It is calculated as a similarity preserving hash from the metadata of a digital asset. The purpose of the Meta-Code is the discovery of digital assets with similar metadata or spelling mistakes. The metadata supplied to the algorithm is called seed metadata . Seed metadata is composed of a title and an optional generic extra -field that contains descriptive, industry-sector or use-case specific metadata in textual or binary form (e.g. file headers). We do not prescribe a particular schema. Functions gen_meta_code ( title , extra = None , bits = 64 ) Create an ISCC Meta-Code using the latest standard algorithm. Applications that generate ISCCs should prioritize explicitly passed title information. If not available they should try to extract a title form the digital asset itself. If extraction fails, the application should resort to a normalized filename before falling back to an empty string. Optional additional metadata may be supplied via the extra -field. The input can be: A textual description of the identified work for disambiguation purposes Structured (JSON) metadata conforming to an industry specific metadata schema Raw bitstream file headers automatically extracted binary file headers A pre-existing industry-specific identifier string Note It is recommended to use the minimal metadata required to disambiguate the work manifested by the digital asset. Parameters: Name Type Description Default title str Title of the work manifested by the digital asset required extra Union[str,bytes,None] Optional metadata for disambiguation None bits int Bit-length of resulting Meta-Code (multiple of 64) 64 Returns: Type Description MetaCode ISCC Meta-Code gen_meta_code_v0 ( title , extra = None , bits = 64 ) Create an ISCC Meta-Code with the algorithm version 0. Parameters: Name Type Description Default title str Title of the work manifested by the digital asset required extra Union[str,bytes,None] Optional metadata for disambiguation None bits int Bit-length of resulting Meta-Code (multiple of 64) 64 Returns: Type Description MetaCode ISCC Meta-Code soft_hash_meta_v0 ( title , extra = None ) Calculate simmilarity preserving 256-bit hash digest from asset metadata. Textual input should be stripped of markup, normalized and trimmed before hashing. Json metadata should be normalized with JCS Note The processing algorithm depends on the type of the extra input. If the extra field is supplied and non-empty, we create separate hashes for title and extra and interleave them in 32-bit chunks: If the input is None or an empty str / bytes object the Meta-Hash will be generated from the title -field only. If the extra -input is a non-empty text string (str) the string is lower-cased and the processing unit is an utf-8 endoded character (possibly multibyte). The resulting hash is interleaved with the title -hash. If the extra -input is a non-empty bytes object the processing is done bytewise and the resulting hash is interleaved with the title -hash. Parameters: Name Type Description Default title str Title of the work manifested in the digital asset required extra Union[str,bytes,None] Additional metadata for disambiguation None Returns: Type Description bytes 256-bit simhash digest for Meta-Code trim_text ( text , nbytes ) Trim text such that its utf-8 encoded size does not exceed nbytes .","title":"Meta-Code"},{"location":"components/code_meta/#iscc-meta-code","text":"The Meta-Code is the first component of a canonical ISCC. It is calculated as a similarity preserving hash from the metadata of a digital asset. The purpose of the Meta-Code is the discovery of digital assets with similar metadata or spelling mistakes. The metadata supplied to the algorithm is called seed metadata . Seed metadata is composed of a title and an optional generic extra -field that contains descriptive, industry-sector or use-case specific metadata in textual or binary form (e.g. file headers). We do not prescribe a particular schema.","title":"ISCC - Meta-Code"},{"location":"components/code_meta/#iscc_core.code_meta-functions","text":"","title":"Functions"},{"location":"components/code_meta/#iscc_core.code_meta.gen_meta_code","text":"Create an ISCC Meta-Code using the latest standard algorithm. Applications that generate ISCCs should prioritize explicitly passed title information. If not available they should try to extract a title form the digital asset itself. If extraction fails, the application should resort to a normalized filename before falling back to an empty string. Optional additional metadata may be supplied via the extra -field. The input can be: A textual description of the identified work for disambiguation purposes Structured (JSON) metadata conforming to an industry specific metadata schema Raw bitstream file headers automatically extracted binary file headers A pre-existing industry-specific identifier string Note It is recommended to use the minimal metadata required to disambiguate the work manifested by the digital asset. Parameters: Name Type Description Default title str Title of the work manifested by the digital asset required extra Union[str,bytes,None] Optional metadata for disambiguation None bits int Bit-length of resulting Meta-Code (multiple of 64) 64 Returns: Type Description MetaCode ISCC Meta-Code","title":"gen_meta_code()"},{"location":"components/code_meta/#iscc_core.code_meta.gen_meta_code_v0","text":"Create an ISCC Meta-Code with the algorithm version 0. Parameters: Name Type Description Default title str Title of the work manifested by the digital asset required extra Union[str,bytes,None] Optional metadata for disambiguation None bits int Bit-length of resulting Meta-Code (multiple of 64) 64 Returns: Type Description MetaCode ISCC Meta-Code","title":"gen_meta_code_v0()"},{"location":"components/code_meta/#iscc_core.code_meta.soft_hash_meta_v0","text":"Calculate simmilarity preserving 256-bit hash digest from asset metadata. Textual input should be stripped of markup, normalized and trimmed before hashing. Json metadata should be normalized with JCS Note The processing algorithm depends on the type of the extra input. If the extra field is supplied and non-empty, we create separate hashes for title and extra and interleave them in 32-bit chunks: If the input is None or an empty str / bytes object the Meta-Hash will be generated from the title -field only. If the extra -input is a non-empty text string (str) the string is lower-cased and the processing unit is an utf-8 endoded character (possibly multibyte). The resulting hash is interleaved with the title -hash. If the extra -input is a non-empty bytes object the processing is done bytewise and the resulting hash is interleaved with the title -hash. Parameters: Name Type Description Default title str Title of the work manifested in the digital asset required extra Union[str,bytes,None] Additional metadata for disambiguation None Returns: Type Description bytes 256-bit simhash digest for Meta-Code","title":"soft_hash_meta_v0()"},{"location":"components/code_meta/#iscc_core.code_meta.trim_text","text":"Trim text such that its utf-8 encoded size does not exceed nbytes .","title":"trim_text()"},{"location":"components/content/","text":"ISCC - Content Codes","title":"ISCC - Content Codes"},{"location":"components/content/#iscc-content-codes","text":"","title":"ISCC - Content Codes"},{"location":"components/content/code_content_audio/","text":"ISCC - Content-Code Audio A similarity preserving hash for audio content (soft hash). The Content-Code Audio is generated from a Chromaprint fingerprint provided as a vector of 32-bit signed integers. Chromaprints are extracted with fpcalc 1.5.0 using the following command line parameters: $ fpcalc -raw -json -signed -length 0 myaudiofile.mp3 Functions gen_audio_code ( cv , bits = 64 ) Create an ISCC Content-Code Audio with the latest standard algorithm. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required bits int Bit-length resulting Content-Code Audio (multiple of 64) 64 Returns: Type Description ContentCodeAudio ContentCodeAudio object gen_audio_code_v0 ( cv , bits = 64 ) Create an ISCC Content-Code Audio with algorithm v0. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required bits int Bit-length resulting Content-Code Audio (multiple of 64) 64 Returns: Type Description ContentCodeAudio ContentCodeAudio object soft_hash_audio_v0 ( cv ) Create 256-bit audio similarity hash from a chromaprint vector. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required Returns: Type Description bytes 256-bit Audio-Hash digest","title":"Audio"},{"location":"components/content/code_content_audio/#iscc-content-code-audio","text":"A similarity preserving hash for audio content (soft hash). The Content-Code Audio is generated from a Chromaprint fingerprint provided as a vector of 32-bit signed integers. Chromaprints are extracted with fpcalc 1.5.0 using the following command line parameters: $ fpcalc -raw -json -signed -length 0 myaudiofile.mp3","title":"ISCC - Content-Code Audio"},{"location":"components/content/code_content_audio/#iscc_core.code_content_audio-functions","text":"","title":"Functions"},{"location":"components/content/code_content_audio/#iscc_core.code_content_audio.gen_audio_code","text":"Create an ISCC Content-Code Audio with the latest standard algorithm. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required bits int Bit-length resulting Content-Code Audio (multiple of 64) 64 Returns: Type Description ContentCodeAudio ContentCodeAudio object","title":"gen_audio_code()"},{"location":"components/content/code_content_audio/#iscc_core.code_content_audio.gen_audio_code_v0","text":"Create an ISCC Content-Code Audio with algorithm v0. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required bits int Bit-length resulting Content-Code Audio (multiple of 64) 64 Returns: Type Description ContentCodeAudio ContentCodeAudio object","title":"gen_audio_code_v0()"},{"location":"components/content/code_content_audio/#iscc_core.code_content_audio.soft_hash_audio_v0","text":"Create 256-bit audio similarity hash from a chromaprint vector. Parameters: Name Type Description Default cv Iterable[int] Chromaprint vector required Returns: Type Description bytes 256-bit Audio-Hash digest","title":"soft_hash_audio_v0()"},{"location":"components/content/code_content_image/","text":"ISCC - Content-Code Image A similarity preserving perceptual hash for images. The ISCC Content-Code Image is created by calculating a discrete cosine transform on normalized image-pixels and comparing the values from the upper left area of the dct-matrix against their median values to set the hash-bits. Functions gen_image_code ( img , bits = 64 ) Create an ISCC Content-Code Image with the latest standard algorithm. Parameters: Name Type Description Default img Stream Image data stream. required bits int Bit-length of ISCC Content-Code Image (default 64). 64 Returns: Type Description ContentCodeImage ISCC Content-Code Image. gen_image_code_v0 ( img , bits = 64 ) Create an ISCC Content-Code Image with algorithm v0. Parameters: Name Type Description Default img Stream Image data stream. required bits int Bit-length of ISCC Content-Code Image (default 64). 64 Returns: Type Description ContentCodeImage ISCC Content-Code Image. normalize_image ( img ) Normalize image for hash calculation. Add white background to images with alpha transparency Convert to grayscale Resize (bicubic) to 32x32 pixels and flatten Parameters: Name Type Description Default img Stream Image data stream. required Returns: Type Description Tuple[Sequence[int], int, int] A tuple of (pixels_1024, original_width, original_height soft_hash_image_v0 ( pixels , bits = 64 ) Calculate image hash from normalized grayscale pixel sequence of length 1024. Parameters: Name Type Description Default pixels Sequence[int] required bits int Bit-length of image hash (default 64). 64 Returns: Type Description bytes Similarity preserving Image-Hash digest.","title":"Image"},{"location":"components/content/code_content_image/#iscc-content-code-image","text":"A similarity preserving perceptual hash for images. The ISCC Content-Code Image is created by calculating a discrete cosine transform on normalized image-pixels and comparing the values from the upper left area of the dct-matrix against their median values to set the hash-bits.","title":"ISCC - Content-Code Image"},{"location":"components/content/code_content_image/#iscc_core.code_content_image-functions","text":"","title":"Functions"},{"location":"components/content/code_content_image/#iscc_core.code_content_image.gen_image_code","text":"Create an ISCC Content-Code Image with the latest standard algorithm. Parameters: Name Type Description Default img Stream Image data stream. required bits int Bit-length of ISCC Content-Code Image (default 64). 64 Returns: Type Description ContentCodeImage ISCC Content-Code Image.","title":"gen_image_code()"},{"location":"components/content/code_content_image/#iscc_core.code_content_image.gen_image_code_v0","text":"Create an ISCC Content-Code Image with algorithm v0. Parameters: Name Type Description Default img Stream Image data stream. required bits int Bit-length of ISCC Content-Code Image (default 64). 64 Returns: Type Description ContentCodeImage ISCC Content-Code Image.","title":"gen_image_code_v0()"},{"location":"components/content/code_content_image/#iscc_core.code_content_image.normalize_image","text":"Normalize image for hash calculation. Add white background to images with alpha transparency Convert to grayscale Resize (bicubic) to 32x32 pixels and flatten Parameters: Name Type Description Default img Stream Image data stream. required Returns: Type Description Tuple[Sequence[int], int, int] A tuple of (pixels_1024, original_width, original_height","title":"normalize_image()"},{"location":"components/content/code_content_image/#iscc_core.code_content_image.soft_hash_image_v0","text":"Calculate image hash from normalized grayscale pixel sequence of length 1024. Parameters: Name Type Description Default pixels Sequence[int] required bits int Bit-length of image hash (default 64). 64 Returns: Type Description bytes Similarity preserving Image-Hash digest.","title":"soft_hash_image_v0()"},{"location":"components/content/code_content_text/","text":"ISCC - Content-Code Text A similarity preserving hash for text content (soft hash). The ISCC Content-Code Text is generated from plain-text that has been extracted from different media assets. Functions gen_text_code ( text , bits = 64 ) Create an ISCC Content-Code-Text with the latest standard algorithm. Note If text input includes markup (like HTML tags) it must be removed beforehand. Parameters: Name Type Description Default text Text Plain text for Text-Code creation. required bits int Bit-length (multiple of 32) for ISCC Code Hash (default 64). 64 Returns: Type Description ContentCodeText TextCode with properties: code, characters gen_text_code_v0 ( text , bits = 64 ) Create ISCC Content-Code-Text with algorithm v0 Normalize and lowercase text. Create a Simhash from the tokens generated by a 13-character sliding window. Encode resulting byte hash with ISCC codec. Parameters: Name Type Description Default text Text Normalized text for Text-Code creation. required bits int Bit-length of ISCC Code Hash (default 64). 64 Returns: Type Description ContentCodeText TextCode with properties: code, characters normalize_text ( text ) Unicode normalization and character filtering. Decode to Unicode. Remove leading/trailing whitespace. Decompose with NFD normalization. Filter special characters and whitespace. Remove duplicate whitespace. Recombine with NFKC normalization. Parameters: Name Type Description Default text Text Plain text to be normalized. required Returns: Type Description str Normalized plain text. soft_hash_text_v0 ( text ) Create a 256-bit similarity preserving hash for text input with v0 algorithm. Text should be stripped of markup, normalized and lowercased before hash creation. Parameters: Name Type Description Default text str Plain text to be hashed. required Returns: Type Description bytes 256-bit similarity preserving byte hash","title":"Text"},{"location":"components/content/code_content_text/#iscc-content-code-text","text":"A similarity preserving hash for text content (soft hash). The ISCC Content-Code Text is generated from plain-text that has been extracted from different media assets.","title":"ISCC - Content-Code Text"},{"location":"components/content/code_content_text/#iscc_core.code_content_text-functions","text":"","title":"Functions"},{"location":"components/content/code_content_text/#iscc_core.code_content_text.gen_text_code","text":"Create an ISCC Content-Code-Text with the latest standard algorithm. Note If text input includes markup (like HTML tags) it must be removed beforehand. Parameters: Name Type Description Default text Text Plain text for Text-Code creation. required bits int Bit-length (multiple of 32) for ISCC Code Hash (default 64). 64 Returns: Type Description ContentCodeText TextCode with properties: code, characters","title":"gen_text_code()"},{"location":"components/content/code_content_text/#iscc_core.code_content_text.gen_text_code_v0","text":"Create ISCC Content-Code-Text with algorithm v0 Normalize and lowercase text. Create a Simhash from the tokens generated by a 13-character sliding window. Encode resulting byte hash with ISCC codec. Parameters: Name Type Description Default text Text Normalized text for Text-Code creation. required bits int Bit-length of ISCC Code Hash (default 64). 64 Returns: Type Description ContentCodeText TextCode with properties: code, characters","title":"gen_text_code_v0()"},{"location":"components/content/code_content_text/#iscc_core.code_content_text.normalize_text","text":"Unicode normalization and character filtering. Decode to Unicode. Remove leading/trailing whitespace. Decompose with NFD normalization. Filter special characters and whitespace. Remove duplicate whitespace. Recombine with NFKC normalization. Parameters: Name Type Description Default text Text Plain text to be normalized. required Returns: Type Description str Normalized plain text.","title":"normalize_text()"},{"location":"components/content/code_content_text/#iscc_core.code_content_text.soft_hash_text_v0","text":"Create a 256-bit similarity preserving hash for text input with v0 algorithm. Text should be stripped of markup, normalized and lowercased before hash creation. Parameters: Name Type Description Default text str Plain text to be hashed. required Returns: Type Description bytes 256-bit similarity preserving byte hash","title":"soft_hash_text_v0()"},{"location":"components/content/code_content_video/","text":"ISCC - Content-Code Video ISCC Content-Code Video The Content-Code Video is generated from MPEG-7 Video Frame Signatures. Frame Signatures can be extracted with ffmpeg (see: https://www.ffmpeg.org/) using the following command line parameters: $ ffmpeg -i video.mpg -vf fps=fps=5,signature=format=xml:filename=sig.xml -f null - The relevant frame signatures can be parsed from the following elements in sig.xml: <FrameSignature>0 0 0 1 0 0 1 0 1 1 0 0 1 1 ...</FrameSignature> Note it is also possible to extract the signatures in a more compact binary format but it requires a custom binary parser to decode the frame signaturs. Functions gen_video_code ( frame_sigs , bits = 64 ) Create an ISCC Content-Code Video with the latest standard algorithm. Parameters: Name Type Description Default frame_sigs FrameSig Sequence of MP7 frame signatures required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description ContentCodeVideo VideoCode object with code property set gen_video_code_v0 ( frame_sigs , bits = 64 ) Create an ISCC Content-Code Video with algorithm v0. Parameters: Name Type Description Default frame_sigs FrameSig Sequence of MP7 frame signatures required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description ContentCodeVideo VideoCode object with code property set soft_hash_video_v0 ( frame_sigs ) Compute 256-bit video hash v0 from MP7 frame signatures.","title":"Video"},{"location":"components/content/code_content_video/#iscc-content-code-video","text":"","title":"ISCC - Content-Code Video"},{"location":"components/content/code_content_video/#iscc_core.code_content_video--iscc-content-code-video","text":"The Content-Code Video is generated from MPEG-7 Video Frame Signatures. Frame Signatures can be extracted with ffmpeg (see: https://www.ffmpeg.org/) using the following command line parameters: $ ffmpeg -i video.mpg -vf fps=fps=5,signature=format=xml:filename=sig.xml -f null - The relevant frame signatures can be parsed from the following elements in sig.xml: <FrameSignature>0 0 0 1 0 0 1 0 1 1 0 0 1 1 ...</FrameSignature> Note it is also possible to extract the signatures in a more compact binary format but it requires a custom binary parser to decode the frame signaturs.","title":"ISCC Content-Code Video"},{"location":"components/content/code_content_video/#iscc_core.code_content_video-functions","text":"","title":"Functions"},{"location":"components/content/code_content_video/#iscc_core.code_content_video.gen_video_code","text":"Create an ISCC Content-Code Video with the latest standard algorithm. Parameters: Name Type Description Default frame_sigs FrameSig Sequence of MP7 frame signatures required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description ContentCodeVideo VideoCode object with code property set","title":"gen_video_code()"},{"location":"components/content/code_content_video/#iscc_core.code_content_video.gen_video_code_v0","text":"Create an ISCC Content-Code Video with algorithm v0. Parameters: Name Type Description Default frame_sigs FrameSig Sequence of MP7 frame signatures required bits int Bit-length resulting Instance-Code (multiple of 64) 64 Returns: Type Description ContentCodeVideo VideoCode object with code property set","title":"gen_video_code_v0()"},{"location":"components/content/code_content_video/#iscc_core.code_content_video.soft_hash_video_v0","text":"Compute 256-bit video hash v0 from MP7 frame signatures.","title":"soft_hash_video_v0()"},{"location":"models/models/","text":"Schema of objects returned by ISCC processing algorithms Classes ContentCodeAudio ( BaseCode ) pydantic-model Content-Code-Audio standardized metadata model. Attributes code : str pydantic-field required Content-Code-Audio in standard representation. title : str pydantic-field Title as extracted from audio asset. duration : float pydantic-field Duration of audio im seconds. ContentCodeImage ( BaseCode ) pydantic-model Content-Code-Image standardized metadata model. Attributes code : str pydantic-field required Content-Code-Image in standard representation. title : str pydantic-field Title as extracted from image file. width : int pydantic-field Width of image in number of pixels. height : int pydantic-field Height of image in number of pixels. ContentCodeText ( BaseCode ) pydantic-model Content-Code-Text standardized metadata model. Attributes code : str pydantic-field required Content-Code-Text in standard representation. title : str pydantic-field Title as extracted from text document. characters : int pydantic-field Number of text characters (after normalize_text). language : str pydantic-field Main language of content (BCP-47). ContentCodeVideo ( BaseCode ) pydantic-model Content-Code-Video standardized metadata model. Attributes code : str pydantic-field required Content-Code-Video in standard representation. title : str pydantic-field Title as extracted from video asset. duration : float pydantic-field Duration of video im seconds. fps : float pydantic-field Frames per second. width : int pydantic-field Width of video in number of pixels. height : int pydantic-field Height of video in number of pixels. language : Union [ str , List [ str ]] pydantic-field Main language of video (BCP 47). DataCode ( BaseCode ) pydantic-model Data-Code standardized metadata model. Attributes code : str pydantic-field required Data-Code in standard representation. features : List [ str ] pydantic-field List of per datachunk hashes sizes : List [ int ] pydantic-field Sizes of datachunks InstanceCode ( BaseCode ) pydantic-model Instance-Code standardized metadata model. Attributes code : str pydantic-field required Instance-Code in standard representation. datahash : str pydantic-field required Multihash of digital asset (Blake3 by default. filesize : int pydantic-field required File size in bytes. MetaCode ( BaseCode ) pydantic-model Meta-Code standardized metadata model. Attributes code : str pydantic-field required Meta-Code in standard representation. title : str pydantic-field Title used for Meta-Code creation. extra : str pydantic-field Extra metadata used for Meta-Code. binary : bool pydantic-field required Extra metadata was supplied in binary format. metahash : str pydantic-field required Blake3 cryptographic hash of metadata.","title":"Models"},{"location":"models/models/#iscc_core.models-classes","text":"","title":"Classes"},{"location":"models/models/#iscc_core.models.ContentCodeAudio","text":"Content-Code-Audio standardized metadata model.","title":"ContentCodeAudio"},{"location":"models/models/#iscc_core.models.ContentCodeAudio-attributes","text":"","title":"Attributes"},{"location":"models/models/#iscc_core.models.ContentCodeAudio.code","text":"Content-Code-Audio in standard representation.","title":"code"},{"location":"models/models/#iscc_core.models.ContentCodeAudio.title","text":"Title as extracted from audio asset.","title":"title"},{"location":"models/models/#iscc_core.models.ContentCodeAudio.duration","text":"Duration of audio im seconds.","title":"duration"},{"location":"models/models/#iscc_core.models.ContentCodeImage","text":"Content-Code-Image standardized metadata model.","title":"ContentCodeImage"},{"location":"models/models/#iscc_core.models.ContentCodeImage-attributes","text":"","title":"Attributes"},{"location":"models/models/#iscc_core.models.ContentCodeImage.code","text":"Content-Code-Image in standard representation.","title":"code"},{"location":"models/models/#iscc_core.models.ContentCodeImage.title","text":"Title as extracted from image file.","title":"title"},{"location":"models/models/#iscc_core.models.ContentCodeImage.width","text":"Width of image in number of pixels.","title":"width"},{"location":"models/models/#iscc_core.models.ContentCodeImage.height","text":"Height of image in number of pixels.","title":"height"},{"location":"models/models/#iscc_core.models.ContentCodeText","text":"Content-Code-Text standardized metadata model.","title":"ContentCodeText"},{"location":"models/models/#iscc_core.models.ContentCodeText-attributes","text":"","title":"Attributes"},{"location":"models/models/#iscc_core.models.ContentCodeText.code","text":"Content-Code-Text in standard representation.","title":"code"},{"location":"models/models/#iscc_core.models.ContentCodeText.title","text":"Title as extracted from text document.","title":"title"},{"location":"models/models/#iscc_core.models.ContentCodeText.characters","text":"Number of text characters (after normalize_text).","title":"characters"},{"location":"models/models/#iscc_core.models.ContentCodeText.language","text":"Main language of content (BCP-47).","title":"language"},{"location":"models/models/#iscc_core.models.ContentCodeVideo","text":"Content-Code-Video standardized metadata model.","title":"ContentCodeVideo"},{"location":"models/models/#iscc_core.models.ContentCodeVideo-attributes","text":"","title":"Attributes"},{"location":"models/models/#iscc_core.models.ContentCodeVideo.code","text":"Content-Code-Video in standard representation.","title":"code"},{"location":"models/models/#iscc_core.models.ContentCodeVideo.title","text":"Title as extracted from video asset.","title":"title"},{"location":"models/models/#iscc_core.models.ContentCodeVideo.duration","text":"Duration of video im seconds.","title":"duration"},{"location":"models/models/#iscc_core.models.ContentCodeVideo.fps","text":"Frames per second.","title":"fps"},{"location":"models/models/#iscc_core.models.ContentCodeVideo.width","text":"Width of video in number of pixels.","title":"width"},{"location":"models/models/#iscc_core.models.ContentCodeVideo.height","text":"Height of video in number of pixels.","title":"height"},{"location":"models/models/#iscc_core.models.ContentCodeVideo.language","text":"Main language of video (BCP 47).","title":"language"},{"location":"models/models/#iscc_core.models.DataCode","text":"Data-Code standardized metadata model.","title":"DataCode"},{"location":"models/models/#iscc_core.models.DataCode-attributes","text":"","title":"Attributes"},{"location":"models/models/#iscc_core.models.DataCode.code","text":"Data-Code in standard representation.","title":"code"},{"location":"models/models/#iscc_core.models.DataCode.features","text":"List of per datachunk hashes","title":"features"},{"location":"models/models/#iscc_core.models.DataCode.sizes","text":"Sizes of datachunks","title":"sizes"},{"location":"models/models/#iscc_core.models.InstanceCode","text":"Instance-Code standardized metadata model.","title":"InstanceCode"},{"location":"models/models/#iscc_core.models.InstanceCode-attributes","text":"","title":"Attributes"},{"location":"models/models/#iscc_core.models.InstanceCode.code","text":"Instance-Code in standard representation.","title":"code"},{"location":"models/models/#iscc_core.models.InstanceCode.datahash","text":"Multihash of digital asset (Blake3 by default.","title":"datahash"},{"location":"models/models/#iscc_core.models.InstanceCode.filesize","text":"File size in bytes.","title":"filesize"},{"location":"models/models/#iscc_core.models.MetaCode","text":"Meta-Code standardized metadata model.","title":"MetaCode"},{"location":"models/models/#iscc_core.models.MetaCode-attributes","text":"","title":"Attributes"},{"location":"models/models/#iscc_core.models.MetaCode.code","text":"Meta-Code in standard representation.","title":"code"},{"location":"models/models/#iscc_core.models.MetaCode.title","text":"Title used for Meta-Code creation.","title":"title"},{"location":"models/models/#iscc_core.models.MetaCode.extra","text":"Extra metadata used for Meta-Code.","title":"extra"},{"location":"models/models/#iscc_core.models.MetaCode.binary","text":"Extra metadata was supplied in binary format.","title":"binary"},{"location":"models/models/#iscc_core.models.MetaCode.metahash","text":"Blake3 cryptographic hash of metadata.","title":"metahash"},{"location":"options/options/","text":"Classes CoreOptions ( BaseSettings ) pydantic-model Parameters with defaults for ISCC calculations. Attributes meta_bits : int pydantic-field Default length of generated Meta-Code in bits meta_trim_title : int pydantic-field Trim title length to this mumber of bytes meta_trim_extra : int pydantic-field Trim extra to this number of bytes meta_ngram_size_title : int pydantic-field Sliding window width (characters) for title metadata meta_ngram_size_extra_text : int pydantic-field Sliding window width (characters) for textural extra metadata meta_ngram_size_extra_binary : int pydantic-field Sliding window width (bytes) for binary extra metadata text_bits : int pydantic-field Default length of generated Content-Code Text in bits text_ngram_size : int pydantic-field Number of characters per feature hash (size of sliding window) text_unicode_filter : frozenset pydantic-field Unicode categories to remove during text normalization text_whitespace : frozenset pydantic-field Common control characters considered whitespace image_bits : int pydantic-field Default length of generated Content-Code Image in bits audio_bits : int pydantic-field Default length of generated Content-Code Audio in bits video_bits : int pydantic-field Default length of generated Content-Code Video in bits data_bits : int pydantic-field Default length of generated Data-Code in bits data_avg_chunk_size : int pydantic-field Average chunk size for data chunking. data_granular : bool pydantic-field Calculate granular data features. data_granular_factor : int pydantic-field Size of granular data chunks times average chunk size instance_bits : int pydantic-field Default length of generated Instance-Code in bits instance_read_size : int pydantic-field File read buffer during instance hashing cdc_read_size : int pydantic-field File read buffer during chunking cdc_avg_chunk_size : int pydantic-field Target chunk size in number of bytes. cdc_gear : Tuple pydantic-field Random gear vector","title":"Options"},{"location":"options/options/#iscc_core.options-classes","text":"","title":"Classes"},{"location":"options/options/#iscc_core.options.CoreOptions","text":"Parameters with defaults for ISCC calculations.","title":"CoreOptions"},{"location":"options/options/#iscc_core.options.CoreOptions-attributes","text":"","title":"Attributes"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_bits","text":"Default length of generated Meta-Code in bits","title":"meta_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_trim_title","text":"Trim title length to this mumber of bytes","title":"meta_trim_title"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_trim_extra","text":"Trim extra to this number of bytes","title":"meta_trim_extra"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_ngram_size_title","text":"Sliding window width (characters) for title metadata","title":"meta_ngram_size_title"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_ngram_size_extra_text","text":"Sliding window width (characters) for textural extra metadata","title":"meta_ngram_size_extra_text"},{"location":"options/options/#iscc_core.options.CoreOptions.meta_ngram_size_extra_binary","text":"Sliding window width (bytes) for binary extra metadata","title":"meta_ngram_size_extra_binary"},{"location":"options/options/#iscc_core.options.CoreOptions.text_bits","text":"Default length of generated Content-Code Text in bits","title":"text_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.text_ngram_size","text":"Number of characters per feature hash (size of sliding window)","title":"text_ngram_size"},{"location":"options/options/#iscc_core.options.CoreOptions.text_unicode_filter","text":"Unicode categories to remove during text normalization","title":"text_unicode_filter"},{"location":"options/options/#iscc_core.options.CoreOptions.text_whitespace","text":"Common control characters considered whitespace","title":"text_whitespace"},{"location":"options/options/#iscc_core.options.CoreOptions.image_bits","text":"Default length of generated Content-Code Image in bits","title":"image_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.audio_bits","text":"Default length of generated Content-Code Audio in bits","title":"audio_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.video_bits","text":"Default length of generated Content-Code Video in bits","title":"video_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.data_bits","text":"Default length of generated Data-Code in bits","title":"data_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.data_avg_chunk_size","text":"Average chunk size for data chunking.","title":"data_avg_chunk_size"},{"location":"options/options/#iscc_core.options.CoreOptions.data_granular","text":"Calculate granular data features.","title":"data_granular"},{"location":"options/options/#iscc_core.options.CoreOptions.data_granular_factor","text":"Size of granular data chunks times average chunk size","title":"data_granular_factor"},{"location":"options/options/#iscc_core.options.CoreOptions.instance_bits","text":"Default length of generated Instance-Code in bits","title":"instance_bits"},{"location":"options/options/#iscc_core.options.CoreOptions.instance_read_size","text":"File read buffer during instance hashing","title":"instance_read_size"},{"location":"options/options/#iscc_core.options.CoreOptions.cdc_read_size","text":"File read buffer during chunking","title":"cdc_read_size"},{"location":"options/options/#iscc_core.options.CoreOptions.cdc_avg_chunk_size","text":"Target chunk size in number of bytes.","title":"cdc_avg_chunk_size"},{"location":"options/options/#iscc_core.options.CoreOptions.cdc_gear","text":"Random gear vector","title":"cdc_gear"},{"location":"utilities/utils/","text":"Functions sliding_window ( seq , width ) Generate a sequence of equal \"width\" slices each advancing by one elemnt. All types that have a length and can be sliced are supported (list, tuple, str ...). The result type matches the type of the input sequence. Fragment slices smaller than the width at the end of the sequence are not produced. If \"witdh\" is smaller than the input sequence than one element will be returned that is shorter than the requested width. Parameters: Name Type Description Default seq Sequence Sequence of values to slide over required width int Width of sliding window in number of items required Returns: Type Description Union[Generat,] A generator of window sized items","title":"Utilities"},{"location":"utilities/utils/#iscc_core.utils-functions","text":"","title":"Functions"},{"location":"utilities/utils/#iscc_core.utils.sliding_window","text":"Generate a sequence of equal \"width\" slices each advancing by one elemnt. All types that have a length and can be sliced are supported (list, tuple, str ...). The result type matches the type of the input sequence. Fragment slices smaller than the width at the end of the sequence are not produced. If \"witdh\" is smaller than the input sequence than one element will be returned that is shorter than the requested width. Parameters: Name Type Description Default seq Sequence Sequence of values to slide over required width int Width of sliding window in number of items required Returns: Type Description Union[Generat,] A generator of window sized items","title":"sliding_window()"}]}